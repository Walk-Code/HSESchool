package com.zhuochuang.hsej.store;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.CheckBox;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;

import com.layout.PullToRefreshListView;
import com.layout.PullToRefreshListView.OnRefreshListener;
import com.model.DataLoader;
import com.model.EventManager;
import com.model.TaskType;
import com.model.data.BaseInfo;
import com.model.data.GroupInfo;
import com.model.data.ProductInfo;
import com.util.Utils;
import com.zhuochuang.hsej.BaseActivity;
import com.zhuochuang.hsej.MainActivity;
import com.zhuochuang.hsej.R;
import com.zhuochuang.hsej.store.ShopCartListViewAdapter.CheckInterface;
import com.zhuochuang.hsej.store.ShopCartListViewAdapter.ModifyCountInterface;

@SuppressLint("ResourceAsColor")
public class StoreShoppingCarActivity extends BaseActivity  {
	private ShopCartListViewAdapter mAdapter; 
	private PullToRefreshListView mListView;
	private TextView mTotalPrice;
	private TextView mGoodCount;
	private boolean lock_edit = true;
	private JSONArray mItemsArr;
	private PopupWindow popWindow;
	private JSONObject mGoodsMessage;
	private List<Map<String,Object>> mDatasCar;
	private List<GroupInfo> mGroups = new ArrayList<GroupInfo>();
	private Map<String, List<ProductInfo>> mChildren = new HashMap<String, List<ProductInfo>>();
	private double totalPrice;//总价
	private int totalCount;
	private CheckBox mSelectAll;
	private Handler mHandler;
	@Override
	protected void onCreate(Bundle arg0) {
		super.onCreate(arg0);
		mMainLayout.removeAllViews();
		setContentView(R.layout.store_shopping_car);
		initView();
		DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_ShoppingCarListShoppingCar,null, this);
 	}
	
	private void initView() {		
		mListView = (PullToRefreshListView) findViewById(R.id.pullToListView_shoppingCar);
		mTotalPrice = (TextView) findViewById(R.id.total_price);		
		mDatasCar = new ArrayList<Map<String,Object>>();
		mGoodCount = (TextView)findViewById(R.id.but_pay);
		mSelectAll =  (CheckBox)findViewById(R.id.select_all);
		mGoodCount.setText(getResources().getString(R.string.goods_pay));
		mTotalPrice.setText("0.00");
		findViewById(R.id.but_pay).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {									
				JSONArray shoppingCarArr = new JSONArray();
				if(0 == totalCount) return;	
				for(int i = 0 ; i < mGroups.size(); i++ ){
					double money = 0;
					int totality = 0;
					JSONObject groupObj = new JSONObject();
					JSONArray goodsArr = new JSONArray();					
						try {  							
							groupObj.put("shopId", mGroups.get(i).getId());
							groupObj.put("shopName",  mGroups.get(i).getName());
							groupObj.put("deliverFee", mGroups.get(i).getDeliverFee());
							List<ProductInfo> childs = mChildren.get(mGroups.get(i).getId());						
							for(int j = 0;j < childs.size();j ++){
								if(mGroups.get(i).isChoosed()){
									JSONObject goodsObj = new JSONObject();
									goodsObj.put("goodsId", childs.get(j).getId());
									goodsObj.put("goodsName", childs.get(j).getName());
									goodsObj.put("colour", childs.get(j).getColor());
									goodsObj.put("spec", childs.get(j).getSize());
									goodsObj.put("price", childs.get(j).getPrice());
									goodsObj.put("number", childs.get(j).getCount());
									goodsObj.put("shoppingCarId",  childs.get(j).getShopCarId());
									goodsObj.put("image",  childs.get(j).getImageUrl());
									goodsArr.put(goodsObj);
									money += childs.get(j).getPrice() * childs.get(j).getCount();
									totality += childs.get(j).getCount();
								} 
							}						
							groupObj.put("goods", goodsArr);
							groupObj.put("money", money);
							groupObj.put("totality",totality );
							if(0 == money){
								continue;
							}
						} catch (JSONException e) {
							e.printStackTrace();
						}
					
					shoppingCarArr.put(groupObj);
				}				
				if(0 < shoppingCarArr.length()){
					Intent intent = new Intent(StoreShoppingCarActivity.this,StoreCheckOrderActivity.class);
					intent.putExtra("ShoppingCar", shoppingCarArr.toString());
					intent.putExtra("money", totalPrice);			
					startActivity(intent);
				}			
			}
		});
				
		findViewById(R.id.store_shopping_edit).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				
				if(lock_edit){
					((TextView)findViewById(R.id.store_shopping_edit)).setText("完成");
					((TextView)findViewById(R.id.store_shopping_edit)).setTextColor(Color.RED);
					findViewById(R.id.store_count).setVisibility(View.GONE);
					findViewById(R.id.but_pay).setVisibility(View.GONE);
					findViewById(R.id.store_shopping_collection).setVisibility(View.VISIBLE);
					findViewById(R.id.store_shopping_delete).setVisibility(View.VISIBLE);			
					lock_edit = false;
				}else{
					((TextView)findViewById(R.id.store_shopping_edit)).setText("编辑");
					((TextView)findViewById(R.id.store_shopping_edit)).setTextColor(Color.BLACK);
					findViewById(R.id.store_count).setVisibility(View.VISIBLE);
					findViewById(R.id.but_pay).setVisibility(View.VISIBLE);
					findViewById(R.id.store_shopping_collection).setVisibility(View.GONE);
					findViewById(R.id.store_shopping_delete).setVisibility(View.GONE);
					lock_edit = true;				
				}		
				
			}
		});	
		
		findViewById(R.id.shopping_car_left_back).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				finish();
				
			}
		});
		
		findViewById(R.id.store_shopping_delete).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {									                
                    if(mDatasCar.size() == 0){
    					new AlertDialog.Builder(StoreShoppingCarActivity.this).setCancelable(false)
    					.setMessage(StoreShoppingCarActivity.this.getResources().getString(R.string.store_shopping_car_null))
    					.setPositiveButton(StoreShoppingCarActivity.this.getResources()
    							.getString(R.string.store_shopping_car_go),new DialogInterface.OnClickListener() {
    						@Override
    						public void onClick(DialogInterface dialog,int which) {
    							Intent intent = new Intent(StoreShoppingCarActivity.this,MainActivity.class);
    							intent.putExtra("StorePayFinishActivity", 1);
    							StoreShoppingCarActivity.this.startActivity(intent);
    							((Activity) StoreShoppingCarActivity.this).overridePendingTransition(R.anim.push_bottom_in,R.anim.push_bottom_out);
    						}
    					}).setNegativeButton(StoreShoppingCarActivity.this.getResources().getString(R.string.store_shopping_car_cancle),null).show();
    					return;                                                                      
                }
                doDelete();      		
            }		
		});
		
		findViewById(R.id.store_shopping_collection).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				showDialog(getResources().getString(R.string.collect_success));
			}
		});
		
		mSelectAll.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				doCheckAll();
			}			
		});	
		
		mListView.setOnRefreshListener(new OnRefreshListener() {
			
			@Override
			public void onRefresh() {
				totalCount = 0;
				totalPrice = 0.0;				
				mDatasCar.clear();
				mGroups.clear();
				mChildren.clear();
				mSelectAll.setChecked(false);
				mGoodCount.setText(getResources().getString(R.string.pay_finish));
				mTotalPrice.setText("0.00");
				DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_ShoppingCarListShoppingCar,null, StoreShoppingCarActivity.this);
			}
		});
		//mListView.startRefresh();
	}
	private void doDelete(){
		List<Map<String, Object>> toBeDelete=new ArrayList<>();
		List<GroupInfo> toBeDeleteGroups=new ArrayList<>();
		int  [] id = new int[mDatasCar.size()];
		for(int i=0;i < mGroups.size();i++){
			GroupInfo group = mGroups.get(i);
			List<ProductInfo> childs = mChildren.get(group.getId());
			if(group.isChoosed()){
				toBeDeleteGroups.add(group);		
			}		
			List<ProductInfo> toBeDeleteProducts=new ArrayList<>();
			for(int j=0;j<childs.size();j++){
				if(childs.get(j).isChoosed()){
					toBeDeleteProducts.add(childs.get(j));
					id[i] = Integer.parseInt(childs.get(j).getShopCarId());
				}
			}
			childs.removeAll(toBeDeleteProducts);
		}
		mGroups.removeAll(toBeDeleteGroups);		
		for(int i = 0;i < mDatasCar.size();i++){
			BaseInfo info=(BaseInfo) mDatasCar.get(i).get(ShopCartListViewAdapter.SHOPCART_DATA);
			if(info.isChoosed()){
				toBeDelete.add(mDatasCar.get(i));				
			}
		}
		mDatasCar.removeAll(toBeDelete);		
		mAdapter.notifyDataSetChanged();
		calculateAll();
        mAdapter.notifyDataSetChanged();
        DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_ShoppingCarDelShoppingCar
        		, DataLoader.getInstance().setDelShoppingCarTypeParams(Arrays.toString(id).replace("[", "").replace("]", "")), StoreShoppingCarActivity.this);
        String size = "";
        if(0 != mGroups.size()){
        	size = mGroups.size()+"";
        }
        ((TextView)findViewById(R.id.shopping_car)).setText(getResources().getString(R.string.store_shopping_car)+mGroups.size());       				
	}

	//全选反选
	private void doCheckAll() {
		for (int i = 0; i < mGroups.size(); i++) {
			mGroups.get(i).setChoosed(mSelectAll.isChecked());			
			List<ProductInfo> childs = mChildren.get(mGroups.get(i).getId());
			for (int j = 0; j < childs.size(); j++) {
				childs.get(j).setChoosed(mSelectAll.isChecked());
			} 
		}
		mAdapter.notifyDataSetChanged();//刷新界面
		calculateAll();//更新总价数量
	}
	//计数
	private void calculateAll() {
		totalCount = 0;
		totalPrice = 0.00;
		for (int i = 0; i < mGroups.size(); i++) {
			GroupInfo group = mGroups.get(i);
			List<ProductInfo> childs = mChildren.get(group.getId());
			for (int j = 0; j < childs.size(); j++) {
				ProductInfo product = childs.get(j);
				if (product.isChoosed()) {
					totalCount++;
					totalPrice += product.getCount() * product.getPrice();
				}
			}
		}
		mTotalPrice.setText(getResources().getString(R.string.money_sigh) + new DecimalFormat("#.00").format(totalPrice));
		if(0 == totalCount){
			mGoodCount.setText(getResources().getString(R.string.pay));
		}else{
			mGoodCount.setText("去结算("+totalCount+")");
		}
	}
	@Override
	protected void onDestroy() {
		super.onDestroy();
		EventManager.getInstance().removeHandlerListenner(mHandler);
	}
	@Override
	public void taskFinished(TaskType type, Object result, boolean isHistory) {
		super.taskFinished(type, result, isHistory);
		if(mListView != null){
			mListView.complete();
		}
		if(result == null){
			return;
		}
		if(result instanceof Error){
			Toast.makeText(StoreShoppingCarActivity.this, ((Error) result).getMessage(), Toast.LENGTH_SHORT).show();
			return;
		}
		switch (type) {
		case TaskOrMethod_ShoppingCarListShoppingCar:
			if(((JSONObject)result).has("items")){
				mItemsArr = ((JSONObject)result).optJSONArray("items");				
				if(mItemsArr != null && mItemsArr.length() > 0){				
					for(int i = 0;i < mItemsArr.length(); i++){	
						Map<String, Object> group = new HashMap<String, Object>();
						GroupInfo gininfo = new GroupInfo();
						gininfo.setId(mItemsArr.optJSONObject(i).optString("shopId"));
						gininfo.setName(mItemsArr.optJSONObject(i).optString("shopName"));
						gininfo.setDeliverFee(mItemsArr.optJSONObject(i).optString("deliverFee"));
						gininfo.setAddress(mItemsArr.optJSONObject(i).optString("address"));
						group.put(ShopCartListViewAdapter.SHOPCART_TYPE, ShopCartListViewAdapter.SHOPCART_FLAG_GROUP);
						group.put(ShopCartListViewAdapter.SHOPCART_DATA, gininfo);
						mDatasCar.add(group);
						mGroups.add(gininfo);							
						JSONArray arr = mItemsArr.optJSONObject(i).optJSONArray("goods");
						List<ProductInfo> childs = new ArrayList<ProductInfo>();
						for(int j = 0; j < arr.length(); j++){
							Map<String,Object> product = new HashMap<String, Object>();
							ProductInfo pininfo = new ProductInfo();
						    mGoodsMessage = arr.optJSONObject(j);
						    pininfo.setName(mGoodsMessage.optString("goodsName"));
						    pininfo.setId(mGoodsMessage.optLong("goodsId")+"");						
						    pininfo.setImageUrl(mGoodsMessage.optString("image"));
						    pininfo.setColor(mGoodsMessage.optString("colour"));
						    pininfo.setSize(mGoodsMessage.optString("spec"));
						    pininfo.setPrice(mGoodsMessage.optDouble("price"));
						    pininfo.setCount(mGoodsMessage.optInt("number"));
						    pininfo.setShopCarId(mGoodsMessage.optInt("shoppingCarId")+"");	
						    product.put(ShopCartListViewAdapter.SHOPCART_PARENT_ID, gininfo.getId());
							product.put(ShopCartListViewAdapter.SHOPCART_PARENT_POSITION, i);
							product.put(ShopCartListViewAdapter.SHOPCART_TYPE, ShopCartListViewAdapter.SHOPCART_FLAG_CHILDREN);
							product.put(ShopCartListViewAdapter.SHOPCART_DATA, pininfo);
						    mDatasCar.add(product);
						    childs.add(pininfo);
					   }
						mChildren.put(mGroups.get(i).getId(), childs);
					}					
					mAdapter = new ShopCartListViewAdapter(mDatasCar, StoreShoppingCarActivity.this);
					mAdapter.setCheckInterface(new CheckInterface() {
						
						@Override
						public void checkGroup(int position, boolean isChecked) {
							Map<String, Object> parent = mDatasCar.get(position);
							String parentId = ((GroupInfo) (parent.get(ShopCartListViewAdapter.SHOPCART_DATA))).getId();
							for (int i = 0; i < mDatasCar.size(); i++) {
								Map<String, Object> map = mDatasCar.get(i);
								String child_parentId = (String) map.get(ShopCartListViewAdapter.SHOPCART_PARENT_ID);
								if (parentId.equals(child_parentId)) {
									ProductInfo pinfo = (ProductInfo) map.get(ShopCartListViewAdapter.SHOPCART_DATA);
									pinfo.setChoosed(isChecked);
								}
							}

							boolean allGroupSameState = true;
							for (int i = 0; i < mGroups.size(); i++) {
								if (isChecked != mGroups.get(i).isChoosed()) {
									allGroupSameState = false;
									break;
								}
							}
							if (allGroupSameState) {
								mSelectAll.setChecked(isChecked);
							} else {
								mSelectAll.setChecked(false);
							}
							mAdapter.notifyDataSetChanged();
							calculateAll();
						}
						
						@Override
						public void checkChild(int position, boolean isChecked) {							
							Map<String, Object> child = mDatasCar.get(position);
							int parentPosition = (int) child.get(ShopCartListViewAdapter.SHOPCART_PARENT_POSITION);
							GroupInfo parent = mGroups.get(parentPosition);
							List<ProductInfo> childs = mChildren.get(parent.getId());
							boolean allChildSameState = true;
							for (int i = 0; i < childs.size(); i++) {
								if (childs.get(i).isChoosed() != isChecked) {
									allChildSameState = false;
									break;
								}
							}
							if (allChildSameState) {
								parent.setChoosed(isChecked);
							} else {
								parent.setChoosed(false);
							}

							boolean allGroupSameState = true;
							boolean firstState = mGroups.get(0).isChoosed();
							for (int i = 0; i < mGroups.size(); i++) {
								if (firstState != mGroups.get(i).isChoosed()) {
									allGroupSameState = false;
									break;
								}
							}
							if (allGroupSameState) {
								mSelectAll.setChecked(firstState);
							} else {
								mSelectAll.setChecked(false);
							}
							mAdapter.notifyDataSetChanged();
							calculateAll();
						}
					});
					
					mAdapter.setModifyCountInterface(new ModifyCountInterface() {
						
						@Override
						public void doIncrease(int position, View showCountView, boolean isChecked) {
							
							if(isChecked){		
								Map<String, Object> map = mDatasCar.get(position);
								ProductInfo product = (ProductInfo) map.get(ShopCartListViewAdapter.SHOPCART_DATA);
								int currentCount = product.getCount();
								currentCount--;
								if (currentCount < 0) {
									currentCount = 0;
								}
								product.setCount(currentCount);
								((TextView)showCountView).setText(currentCount + "");
								mAdapter.notifyDataSetChanged();
								calculateAll();
							}	
						}
						
						@Override
						public void doDecrease(int position, View showCountView, boolean isChecked) {
							if (isChecked) {
								Map<String, Object> map = mDatasCar.get(position);
								ProductInfo product = (ProductInfo) map.get(ShopCartListViewAdapter.SHOPCART_DATA);
								int currentCount = product.getCount();
								currentCount++;
								product.setCount(currentCount);
								((TextView)showCountView).setText(currentCount + "");
								mAdapter.notifyDataSetChanged();//刷新界面
								calculateAll();//更新总价数量
							}
						}
					});
					mListView.setAdapter(mAdapter);							
				}
				String size = "";
				if(0 < mDatasCar.size()){
					size = "("+mGroups.size()+")";			
				}
				((TextView)findViewById(R.id.shopping_car)).setText(getResources().getString(R.string.store_shopping_car)+size);
			}
			
			break;
		case TaskOrMethod_ShoppingCarDelShoppingCar:
			if(((JSONObject)result).has("result")){
				if("1".equals(((JSONObject)result).opt("result"))){				
					showDialog(getResources().getString(R.string.delete_success));
	                //EventManager.getInstance().sendMessage(EventManager.EventType_MsgChange, mGroups.size()+"");   
				}
			}
			break;	
		default:
			break;
		}
	}
	private void showDialog(String content){
        View view = ((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.store_car_hint, null);
        view.findViewById(R.id.store_car_hints).getBackground().setAlpha(200);
        ((TextView) view.findViewById(R.id.store_car_hint)).setText(content);
        popWindow = new PopupWindow(view, Utils.getScreenWidth(this)/3*2, Utils.getScreenHeight(this)/5, true);  
        popWindow.setBackgroundDrawable(new BitmapDrawable());
        popWindow.setOutsideTouchable(true);
        popWindow.showAtLocation(view.findViewById(R.id.store_car_hints),Gravity.CENTER_HORIZONTAL|Gravity.CENTER_VERTICAL, 0, 0);
	}	
}
