package com.zhuochuang.hsej;

import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.RelativeLayout.LayoutParams;

import com.model.DataLoader;
import com.model.ImageLoaderConfigs;
import com.model.TaskType;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.util.ContentAdapter;
import com.util.Utils;
/**
 * 个人主页(好友/非好友个人主页)
 * @author sam
 *modify kris
 */
public class PersonPageActivity extends BaseActivity implements OnClickListener{
	private GridView mAlbumGridView;
	private ContentAdapter mAlbumAdapter;
	private JSONArray mAlbumArr;
	private JSONObject mUserInfo;
	private boolean mIsAddFriend = false;
	
	@Override
	protected void onCreate(Bundle arg0) {
		// TODO Auto-generated method stub
		super.onCreate(arg0);
        
		setContentView(R.layout.activity_personl_page);
		
		loadUserData(getIntent().getStringExtra("id"));
	}
	
	public void loadUserData(String id){
		showDialogCustom(DIALOG_CUSTOM);
		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("otherUserId", id);
		DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_UserGetUser, params, this);
	}
	
	protected void initView(){
		if(mUserInfo == null){
			return;
		}
		
		JSONObject userObj = mUserInfo.optJSONObject("item");
		if(userObj == null){
			return;
		}
		setTitleText(String.format(getString(R.string.personal_page_title), userObj.optString("nickName")));
		ImageLoader.getInstance().displayImage(userObj.optString("headImage"), 
			     ((ImageView)findViewById(R.id.user_avator)), ImageLoaderConfigs.displayImageOptionsRound);
		
		((TextView)findViewById(R.id.user_name)).setText(userObj.optString("nickName"));
		((TextView)findViewById(R.id.user_gender)).setText(userObj.optString("xb").equalsIgnoreCase("0") ? 
				getResources().getString(R.string.user_xb_nv) : getResources().getString(R.string.user_xb_nan));
		((TextView)findViewById(R.id.user_class)).setText(userObj.optString("bjmc"));
		
		((TextView)findViewById(R.id.user_address)).setText(userObj.optString("lydqm"));
		//((TextView)findViewById(R.id.user_address)).setText(userObj.optString("jg"));
		((TextView)findViewById(R.id.user_signature)).setText(userObj.optString("selfIntroduction"));
		
		((TextView)findViewById(R.id.user_phone)).setText(userObj.optBoolean("phoneVisible")? userObj.optString("phone") : getResources().getString(R.string.personal_page_null));
		((TextView)findViewById(R.id.user_email)).setText(userObj.optBoolean("emailVisible")? userObj.optString("email") : getResources().getString(R.string.personal_page_null));
		
		mAlbumGridView = (GridView) findViewById(R.id.photo_album);
		mAlbumGridView.setEnabled(false);
		final int iconWidth = (getResources().getDisplayMetrics().widthPixels - Utils.dipToPixels(this, 140))/4;
		mAlbumGridView = (GridView) findViewById(R.id.photo_album);
		mAlbumGridView.setAdapter(mAlbumAdapter = new ContentAdapter() {
			
			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				if(convertView == null){
					convertView = ViewGroup.inflate(PersonPageActivity.this, R.layout.listcell_index_album, null);
				}
				
				ImageView image = (ImageView)convertView.findViewById(R.id.image);
				ViewGroup.LayoutParams params = image.getLayoutParams();
				params.width = iconWidth;
				params.height = iconWidth;
				
				JSONObject obj = mAlbumArr.optJSONObject(position);
				if(obj != null){
					ImageLoader.getInstance().displayImage(obj.optString("path"), 
							image, ImageLoaderConfigs.displayImageOptionsBg);
				}
				return convertView;
			}
			
			@Override
			public int getCount() {
				return mAlbumArr == null ? 0 : mAlbumArr.length();
			}
		});
		
		if(mUserInfo.optBoolean("isFriend")){
			findViewById(R.id.btn_atten_friend).setVisibility(View.GONE);
			findViewById(R.id.btn_add_friend).setVisibility(View.GONE);
			((TextView)findViewById(R.id.btn_add_friend)).setText(getString(R.string.personal_page_delete_friend));
			findViewById(R.id.btn_send_msg).setVisibility(View.VISIBLE);
		}else {
            if(getIntent().getBooleanExtra("hasApprove", false)){
            	((TextView)findViewById(R.id.btn_add_friend)).setText(getString(R.string.personal_page_accept_approve));
			}else {
				((TextView)findViewById(R.id.btn_add_friend)).setText(getString(R.string.personal_page_add_friend));
			}
            findViewById(R.id.btn_add_friend).setVisibility(View.VISIBLE);
            findViewById(R.id.btn_send_msg).setVisibility(View.GONE);
            
            if(userObj.optBoolean("attentionable")){
    			findViewById(R.id.btn_atten_friend).setVisibility(View.VISIBLE);
    		}
    		else{
    			findViewById(R.id.btn_atten_friend).setVisibility(View.GONE);
    		}
		}
		
		if(mUserInfo.has("favoriteStatus") && mUserInfo.optString("favoriteStatus").equalsIgnoreCase("0")){
			((TextView)findViewById(R.id.btn_atten_friend)).setText(getString(R.string.personal_page_cancel_atten));
		}else {
			((TextView)findViewById(R.id.btn_atten_friend)).setText(getString(R.string.personal_page_atten_friend));
		}
		
		RelativeLayout.LayoutParams lps = (LayoutParams) findViewById(R.id.photo_album_layout).getLayoutParams();
		lps.height = iconWidth;
		findViewById(R.id.photo_album_layout).setLayoutParams(lps);
		
		findViewById(R.id.photo_album_layout).setOnClickListener(this);
		findViewById(R.id.btn_add_friend).setOnClickListener(this);
		findViewById(R.id.btn_atten_friend).setOnClickListener(this);
		findViewById(R.id.btn_send_msg).setOnClickListener(this);
	}

	public void onRightBtnClick(View v){
		
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		HashMap<String, Object> params = null;
		Intent intent = null;
		
		switch (v.getId()) {
		case R.id.photo_album_layout:
			intent = new Intent(PersonPageActivity.this, AlbumActivity.class);
			intent.putExtra("friendId", getIntent().getStringExtra("id"));
			intent.putExtra("isDeleteOp", false);
			startActivity(intent);
			break;
		case R.id.btn_add_friend://  添加好友/通过验证
			if(mUserInfo != null){
				if(getIntent().getBooleanExtra("hasApprove", false)){
					showDialogCustom(DIALOG_CUSTOM);
					params = new HashMap<String, Object>();
					params.put("toUserIds", getIntent().getStringExtra("id"));
					params.put("status", "4");//4:通过 5:拒绝
					DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_UserApprove, params, PersonPageActivity.this);
				}else {
					mIsAddFriend = true;
					showDialogCustom(DIALOG_CUSTOM);
					params = new HashMap<String, Object>();
					params.put("toUserIds", getIntent().getStringExtra("id"));
					params.put("status", mUserInfo.optBoolean("isFriend") ? "3" : "2");//2加好友 3删除好友
					DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_UserApply, params, PersonPageActivity.this);
				}
			}
			break;
		case R.id.btn_atten_friend://关注好友
			if(mUserInfo != null){
				showDialogCustom(DIALOG_CUSTOM);
				params = new HashMap<String, Object>();
				params.put("toUserIds", getIntent().getStringExtra("id"));
				params.put("status", (mUserInfo.has("favoriteStatus") && mUserInfo.optString("favoriteStatus").equalsIgnoreCase("0")) ? "1" : "0");//0加关注 1取消关注
				DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_UserApply, params, PersonPageActivity.this);
			}
			
			break;
		case R.id.btn_send_msg:
			if(mUserInfo != null && mUserInfo.length() > 0){
				intent = new Intent(PersonPageActivity.this, FeedbackActivity.class);
				intent.putExtra("data", mUserInfo.optJSONObject("item").toString());
				startActivity(intent);
			}
			break;
		default:
			break;
		}
	}
	
	@Override
	public void taskFinished(TaskType type, Object result, boolean isHistory) {
		// TODO Auto-generated method stub
		super.taskFinished(type, result, isHistory);
		
		if(type != TaskType.TaskOrMethod_UserApply || type != TaskType.TaskOrMethod_UserApprove){
			removeDialogCustom();
		}
       
		if(result == null){
			return;
		}
		
		if(result instanceof Error){
			Toast.makeText(PersonPageActivity.this, ((Error) result).getMessage(), Toast.LENGTH_SHORT).show();
			return;
		}
		
		switch (type) {
		case TaskOrMethod_UserGetUser:
			if(result instanceof JSONObject){
				mUserInfo = (JSONObject) result;
				initView();
				
				HashMap<String, Object> params = new HashMap<String, Object>();
				params.put("otherId", getIntent().getStringExtra("id"));
				DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_UserGetPhoto, params, this);
			}
			
			break;
		case TaskOrMethod_UserGetPhoto:
			if(result instanceof JSONObject){
				JSONArray tempArr = ((JSONObject) result).optJSONArray("items");
				if(tempArr != null && tempArr.length() > 0){
					mAlbumArr = new JSONArray();
					for(int i = 0; i < tempArr.length(); i++){
						if(i >= 4){
							break;
						}
						mAlbumArr.put(tempArr.optJSONObject(i));
					}
				}
				if(mAlbumAdapter != null){
					mAlbumAdapter.notifyDataSetChanged();
				}
			}
			break;
		case TaskOrMethod_UserApply:
			if(mIsAddFriend){
				mIsAddFriend = false;
				JSONObject obj = null;
				
				if(mUserInfo != null && mUserInfo.has("item")){
					obj = mUserInfo.optJSONObject("item");
				}
				
				if(obj == null || !obj.has("needApproval") || !obj.optBoolean("needApproval", false)){
					Toast.makeText(PersonPageActivity.this, getResources().getString(R.string.verification_friends_success), Toast.LENGTH_SHORT).show();
					findViewById(R.id.btn_add_friend).setVisibility(View.GONE);
					findViewById(R.id.btn_send_msg).setVisibility(View.VISIBLE);
					findViewById(R.id.btn_atten_friend).setVisibility(View.GONE);
				}
				else{
					Toast.makeText(PersonPageActivity.this, getResources().getString(R.string.verification_friends_doing), Toast.LENGTH_SHORT).show();
				}
			}
			else{
				loadUserData(getIntent().getStringExtra("id"));
			}
			break;
		case TaskOrMethod_UserApprove:
			loadUserData(getIntent().getStringExtra("id"));
			break;
			default:
				break;
		}
	}
}
