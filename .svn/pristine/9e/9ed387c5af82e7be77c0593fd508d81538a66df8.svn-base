package com.zhuochuang.hsej.store;

import java.util.Arrays;
import java.util.Calendar;
import java.util.TimeZone;

import org.json.JSONArray;
import org.json.JSONObject;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.TextView;
import android.widget.Toast;

import com.model.DataLoader;
import com.model.ImageLoaderConfigs;
import com.model.TaskType;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.umeng.socialize.utils.Log;
import com.util.ContentAdapter;
import com.zhuochuang.hsej.BaseActivity;
import com.zhuochuang.hsej.R;
import com.zhuochuang.hsej.store.StorePupopWindow.onPopupWindowItemClickListener;
/*
 * 2015-12-4 时间显示有问题
 */
public class StoreOrderActivity extends BaseActivity {
	private WindowManager.LayoutParams mParams;// 设置透明度
	private static final String IS_PAY_STATUS = "1";
	private StorePupopWindow pupopWindow;
	private String[] items;
	private ListView mListViw;
	private JSONArray mItemsArr;
	private JSONArray mFilterArr;
	private ContentAdapter mAdapter;
	private String mStatus;
	
	@Override
	protected void onCreate(Bundle arg0) {
		super.onCreate(arg0);
		mMainLayout.removeAllViews();
		setContentView(R.layout.store_check_order);
		items = getResources().getStringArray(R.array.store_order_selection);
		initView();
		DataLoader.getInstance().startTaskForResult(
				TaskType.TaskOrMethod_OrdersListOrders,
				DataLoader.getInstance().getListOrdersTypeParams(""), this);
	}

	private void initView() {
		mParams = getWindow().getAttributes();
		mListViw = (ListView) findViewById(R.id.store_order_list);
		pupopWindow = new StorePupopWindow(StoreOrderActivity.this, 1);
		pupopWindow.changeData(Arrays.asList(items));
		pupopWindow.setOnPoPupWindowClickListener(new onPopupWindowItemClickListener() {
					@Override
					public void onPopupWindowItemClick(int position) {
						((TextView) findViewById(R.id.details_list)).setText(items[position]);
						if (position != 0 && mStatus != null) {							
							if((position+"").equals(mStatus)){
								mFilterArr = screening(position+"");
							}else mFilterArr = null;
							mAdapter.notifyDataSetChanged();
						}else{
							mFilterArr = mItemsArr;
						}
					}
				});
		pupopWindow.setOnDismissListener(new OnDismissListener() {
			@Override
			public void onDismiss() {
				mParams.alpha = 1.0f;
				findViewById(R.id.details_list).setVisibility(View.VISIBLE);
				findViewById(R.id.main_left).setVisibility(View.VISIBLE);
				findViewById(R.id.search_b).setVisibility(View.VISIBLE);
				findViewById(R.id.details_list_).setVisibility(View.GONE);
				getWindow().setAttributes(mParams);
			}
		});

		findViewById(R.id.details_list).setOnClickListener(
				new OnClickListener() {

					@Override
					public void onClick(View v) {
						getWindow().setAttributes(mParams);
						findViewById(R.id.details_list).setVisibility(View.GONE);
						findViewById(R.id.details_list_).setVisibility(View.VISIBLE);
						findViewById(R.id.main_left).setVisibility(View.GONE);
						findViewById(R.id.search_b).setVisibility(View.GONE);
						mParams.alpha = 0.8f;
						pupopWindow.showAsDropDown(findViewById(R.id.store_detail_title));
					}
				});
		
		findViewById(R.id.main_left).setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				finish();
			}
		});
		
		mListViw.setAdapter(mAdapter = new ContentAdapter() {

			@Override
			public int getCount() {
				if(mFilterArr != null){
					return mFilterArr.length();
				}
				return 0;
			}

			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				if(convertView == null){
					convertView = LayoutInflater.from(StoreOrderActivity.this).inflate(R.layout.store_my_order_list_item, null);					
				}
				final JSONObject obj = mFilterArr.optJSONObject(position);
				final JSONArray orderGoods = obj.optJSONArray("orderGoods");;				
				mStatus = obj.optString("status");
				((TextView)convertView.findViewById(R.id.store_name)).setText(obj.optString("shopName"));
				((TextView)convertView.findViewById(R.id.store_pay_status)).setText(returnStatus(obj.optString("status")));
				((TextView)convertView.findViewById(R.id.store_my_order_number)).setText(getResources()
						.getString(R.string.order_number)+obj.optString("orderNum"));				
				((TextView)convertView.findViewById(R.id.store_my_order_time)).setText(getResources()
						.getString(R.string.order_time)+getStringFromLong(obj.optLong("createDate")));
				((TextView)convertView.findViewById(R.id.store_my_order_sum)).setText(getResources().getString(R.string.sum_to)+orderGoods.length()+
						getResources().getString(R.string.sum_to_sign)+obj.optString("money"));				
				
				ListView listView = (ListView) convertView.findViewById(R.id.order_list);
				listView.setAdapter(new ContentAdapter(){

					@Override
					public int getCount() {			
						return orderGoods.length() == 0 ? 0 : orderGoods.length();
					}

					@Override
					public View getView(int position, View convertView,
							ViewGroup parent) {
						if(convertView == null){
							convertView = LayoutInflater.from(StoreOrderActivity.this).inflate(R.layout.store_order_list_item, null);					
						}
						ImageLoader.getInstance().displayImage(orderGoods.optJSONObject(position).optString("goodsImage"),
								(ImageView)convertView.findViewById(R.id.store_my_order_goods_images),ImageLoaderConfigs.displayImageOptionsBg);
						((TextView)convertView.findViewById(R.id.store_my_order_goods_name)).setText(orderGoods.optJSONObject(position).optString("goodsName"));
						((TextView)convertView.findViewById(R.id.store_my_order_goods_price)).setText(getResources().getString(R.string.money_sigh)+orderGoods.optJSONObject(position).optString("price"));
						((TextView)convertView.findViewById(R.id.store_my_order_goods_sum)).setText("X"+orderGoods.optJSONObject(position).optString("number"));
						((TextView)convertView.findViewById(R.id.store_deliverytype)).setText(returnDeliveryType(obj.optString("payType")));
						
						((TextView)convertView.findViewById(R.id.store_my_order_goods_color)).setText(getResources().getString(R.string.goods_color)+orderGoods.optJSONObject(position).optString("colour"));
						((TextView)convertView.findViewById(R.id.store_my_order_goods_size)).setText(getResources().getString(R.string.goods_size)+orderGoods.optJSONObject(position).optString("spec"));
						return convertView;
					}
					
				});
				if(IS_PAY_STATUS.equals(mStatus)){
					convertView.findViewById(R.id.store_my_order_confirm).setVisibility(View.GONE);
					convertView.findViewById(R.id.store_my_order_pay).setVisibility(View.VISIBLE);
				}
				return convertView;
			}

		});
		mListViw.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				
				
			}
		});

	}
	public String returnDeliveryType(String means){
		if(means.equals("1")){
			return getResources().getString(R.string.store_pay_online);
		}else{
			return getResources().getString(R.string.store_goods_cash);
		}
	}
	//返回订单状态
	public String returnStatus(String status){
		if(status != null){
		int statusNumber = Integer.parseInt(status);		
		return items[statusNumber];
		}else{
			return "null";
		}
	}
	//筛选
	public JSONArray screening(String status){
		JSONArray array = new JSONArray();
		if(mItemsArr.length() > 0 && mItemsArr != null){
			for(int i = 0 ;i < mItemsArr.length(); i++ ){
				JSONObject obj = mItemsArr.optJSONObject(i);
				if(status.equals(obj.optString("status"))){
					array.put(obj);
				}
			}
			
		}	
		return array;
	}
	//时间
	public static String getStringFromLong(long millis){	
		Calendar cal = Calendar.getInstance();
	    cal.setTimeZone(TimeZone.getTimeZone("GMT+8:00"));
	    cal.setTimeInMillis(millis*1l);
	    return (cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-"
	    + cal.get(Calendar.DAY_OF_MONTH) + " " + cal.get(Calendar.HOUR_OF_DAY) + ":"
	            + cal.get(Calendar.MINUTE));
	}  
	@Override
	public void taskFinished(TaskType type, Object result, boolean isHistory) {
		super.taskFinished(type, result, isHistory);
		if (result == null) {
			return;
		}
		if (result instanceof Error) {
			Toast.makeText(StoreOrderActivity.this,((Error) result).getMessage(), Toast.LENGTH_SHORT).show();
			return;
		}
		if (((JSONObject) result).has("items")) {
			mItemsArr = ((JSONObject) result).optJSONArray("items");			
			if (mItemsArr.length() > 0 && mItemsArr != null) {
				mListViw.setVisibility(View.VISIBLE);
				mFilterArr = mItemsArr;
				mAdapter.notifyDataSetChanged();
			}
		}
	}
}
