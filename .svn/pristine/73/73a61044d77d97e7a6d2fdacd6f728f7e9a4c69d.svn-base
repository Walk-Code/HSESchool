package com.zhuochuang.hsej.store;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONObject;

import com.model.DataLoader;
import com.model.TaskListener;
import com.model.TaskType;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.imageaware.ImageAware;
import com.umeng.socialize.utils.Log;
import com.util.Utils;
import com.zhuochuang.hsej.LoginActivity;
import com.zhuochuang.hsej.R;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.database.DataSetObserver;
import android.graphics.ColorFilter;
import android.graphics.Point;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.view.Display;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;

public class StorePopupWindowToShopCar extends PopupWindow{
	private Context mContext;
	private OnPopupWindowsClickListener mOnPopupWindowsClickListener;
	private ArrayAdapter mAdapter;
	private List<String> mList = new ArrayList<String>();//第一个gridview
	private List<String> mList_ = new ArrayList<String>();//第二个gridview
	private PopupWindow popWindow;
	private CustomImageView mCustomImageView;
	private TextView mPrice,mSpecification,mStock;
	private int mColor,mSize;
	private String mShopId;
	private int mInventory;
	
	public StorePopupWindowToShopCar(Context mContext) {
		super();
		this.mContext = mContext;
		initView();		
	}
	private void initView() {
		LayoutInflater layoutInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		View view = layoutInflater.inflate(R.layout.store_details_car, null);
		setContentView(view);
		setWidth(ViewGroup.LayoutParams.MATCH_PARENT);
		setHeight(Utils.getScreenHeight(mContext)/5*4);
		setFocusable(true);
		setBackgroundDrawable(new BitmapDrawable());
		setOutsideTouchable(true);
		setAnimationStyle(R.style.popupwindow_animation_store_car);
		mPrice = (TextView) view.findViewById(R.id.store_goods_doh);
		mSpecification = (TextView) view.findViewById(R.id.store_size);	
		mStock = (TextView) view.findViewById(R.id.store_goods_stock);
		if(0== mList.size()){
			view.findViewById(R.id.store_color_layout).setVisibility(View.GONE);
			view.findViewById(R.id.store_lines).setVisibility(View.GONE);
		}
		if(0 == mList_.size()){			
			view.findViewById(R.id.store_line).setVisibility(View.GONE);
			view.findViewById(R.id.goods_sizes).setVisibility(View.GONE);
			 view.findViewById(R.id.goods_size).setVisibility(View.GONE);
		}
		//退出购物车
		view.findViewById(R.id.store_car_back).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				StorePopupWindowToShopCar.this.dismiss();
			}
		});
		
		view.findViewById(R.id.store_car_commint).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				StorePopupWindowToShopCar.this.dismiss();
				String color = null;
				String size = null; 
				if((0 != mList.size()) || (0 != mList_.size())){
					color = mList.get(mColor);
					size = mList_.get(mSize);
				}
				
				DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_ShoppingCarSaveShoppingCar, DataLoader.getInstance()
						.setsaveShoppingCarTypeParams(1, color, size,mPrice.getText().toString().replace("￥", ""), mShopId), new TaskListener() {						
							@Override
							public void taskFinished(TaskType type, Object result, boolean isHistory) {	
								if(null != mAdapter)
									mAdapter.unregisterDataSetObserver(mDataSetObserver);
							
								if(result == null){
									return;
								}
								if(result instanceof Error){
									Toast.makeText(mContext, ((Error) result).getMessage(), Toast.LENGTH_SHORT).show();
									return;
								}
								switch (type) {
								case TaskOrMethod_ShoppingCarSaveShoppingCar:
									if(((JSONObject)result).has("result")){
										String i = ((JSONObject)result).optString("result");								
										if(i.equals("1")){										
										showDialog();
										}
									}
									break;
								default:
									break;
								}						
							}
							@Override
							public void taskStarted(TaskType type) {
								// TODO Auto-generated method stub
								
							}

							@Override
							public void taskIsCanceled(TaskType type) {
								// TODO Auto-generated method stub
								
							}
					
						});				    
			   }
		});		
		mCustomImageView =  (CustomImageView) view.findViewById(R.id.store_car_images);
		GridView gridView = (GridView) view.findViewById(R.id.goods_color);
		GridView gridView_ = (GridView) view.findViewById(R.id.goods_size);	
		
		if(0 < mList.size() && 0 < mList_.size()){
		gridView.setAdapter(mAdapter = new ArrayAdapter<>(mContext, R.layout.store_details_car_item,R.id.store_detail_car_item,mList));
		gridView_.setAdapter(mAdapter = new ArrayAdapter<>(mContext, R.layout.store_details_car_item,R.id.store_detail_car_item,mList_));
		}
		
		if(null != mAdapter){
			mAdapter.registerDataSetObserver(mDataSetObserver);
			gridView.setOnItemClickListener(new OnItemClickListener() {	
				@Override
				public void onItemClick(AdapterView<?> parent, View view,
						int position, long id) {
					mColor = position;
					mAdapter.notifyDataSetChanged();
					Toast.makeText(mContext, "颜色-->>" + position, 1).show();  				
				}
			});
		}
		
		if(null != mAdapter){
			gridView_.setOnItemClickListener(new OnItemClickListener() {
				@Override
				public void onItemClick(AdapterView<?> parent, View view,
						int position, long id) {
					mSize = position;
					mAdapter.notifyDataSetChanged();				
				}
			});
		}
	}
	public void setOnPopupWindowOnClickListener(OnPopupWindowsClickListener listen){
		mOnPopupWindowsClickListener = listen;
	}
	
	public void changeData(List<String> color,List<String> size,String imagePath,String price,String shopId,int inventory) {		
		if(null != color || null != size){
			mList.addAll(color);
			mList_.addAll(size);
		}
		mInventory = inventory;
        ImageLoader.getInstance().displayImage(imagePath, mCustomImageView);
        mPrice.setText(mContext.getResources().getString(R.string.money_sigh)+price);
        mStock.setText(mContext.getResources().getString(R.string.goods_inventory)+inventory);
        mShopId = shopId;
        
        if((0 < mList.size() || 0 < mList_.size()) && null != mAdapter ){
	        mSpecification.setText("选择 : "+color.get(mColor)+" "+size.get(mSize));
	        mAdapter.notifyDataSetChanged();
        }
    }  
	
	public interface OnPopupWindowsClickListener{
		public void onPopupWindowItemClick(int position);
	}
	
	private void showDialog(){
        View view = ((LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.store_car_hint, null);
        view.findViewById(R.id.store_car_hints).getBackground().setAlpha(200);
        popWindow = new PopupWindow(view, Utils.getScreenWidth(mContext)/3*2, Utils.getScreenHeight(mContext)/5, true);  
        popWindow.setBackgroundDrawable(new BitmapDrawable());
        popWindow.setOutsideTouchable(true);
        popWindow.showAtLocation(view.findViewById(R.id.store_car_hints),Gravity.CENTER_HORIZONTAL|Gravity.CENTER_VERTICAL, 0, 0);
	}	
	
	private DataSetObserver mDataSetObserver = new DataSetObserver() {

		@Override
		public void onChanged() {
			super.onChanged();
			 if(0 < mList.size() || 0 < mList_.size()){
				 mSpecification.setText("选择 : "+mList.get(mColor)+" "+mList_.get(mSize));
			 }
		}
		@Override
		public void onInvalidated() {
			super.onInvalidated();
		}		
	};
}
