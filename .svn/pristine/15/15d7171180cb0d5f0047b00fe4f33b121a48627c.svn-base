package com.zhuochuang.hsej;

import java.lang.reflect.Method;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.text.Spannable;
import android.text.SpannableString;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.FrameLayout;
import android.widget.Gallery;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.TextView.BufferType;
import android.widget.Toast;

import com.layout.ConsumeTextView;
import com.layout.CustomCommentView;
import com.layout.CustomWebView;
import com.layout.PullToRefreshListView;
import com.layout.PullToRefreshListView.OnRemoreListener;
import com.layout.TouchableSpan;
import com.layout.emoji.EmojiUtils;
import com.layout.photoview.PhotoViewer;
import com.model.Configs;
import com.model.DataLoader;
import com.model.ImageLoaderConfigs;
import com.model.TaskType;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.util.AutoGallery;
import com.util.ContentAdapter;
import com.util.PageGuide;
import com.util.Utils;

public class InformationDetailsActivity extends BaseActivity{

	private View mHeaderView;
	private PullToRefreshListView mListView;
	private ContentAdapter mListAdapter;
	private AutoGallery mAutoGallery;
	private PageGuide mPageGuide;
	private CustomCommentView mCustomCommentView;
	private CustomWebView mCustomWebView;
	private JSONObject mHeaderObj;
	private JSONArray mImagesPathArr;;
	private JSONArray mCommentArr;
	
	private int mPageNo = 1;
	private String mCommentReplyUserId = null;
	private String mCommentReplyId = null;
	private String mimeType = "text/html", encoding = "UTF-8";
	private int mCommentDeleteIndex = 0;
	
	private boolean mIsReadMore = false;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		
		setContentView(R.layout.activity_post_information_details);
		setTitleText(R.string.postdetails_title);
		mMainLayout.findViewById(R.id.ico_share).setVisibility(View.VISIBLE);
		((HSESchoolApp)getApplicationContext()).setUmengShareParams(getIntent().getIntExtra("resouceType", 4) + "", getIntent().getStringExtra("id"), "");
		
		showDialogCustom(DIALOG_CUSTOM);
		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("informationId", getIntent().getStringExtra("id"));
		DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_InformationGetInformation, params, InformationDetailsActivity.this);
	}
	
	private void initHeaderView() {
		mHeaderView = ViewGroup.inflate(InformationDetailsActivity.this, R.layout.listcell_informationdetails_header, null);
		mListView.addHeaderView(mHeaderView);
		mHeaderView.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if(mCustomCommentView != null){
					mCustomCommentView.resetCustomEditview(InformationDetailsActivity.this);
					mCommentReplyUserId = null;
					mCommentReplyId = null;
				}
			}
		});
		if(mHeaderObj != null){
			((TextView)mHeaderView.findViewById(R.id.textview_title)).setText(mHeaderObj.optString("name"));
			((TextView)mHeaderView.findViewById(R.id.textview_date)).setText(Utils.getAlmostTime(InformationDetailsActivity.this, mHeaderObj.optLong("createDate")));
			mCustomWebView = (CustomWebView) mHeaderView.findViewById(R.id.webview);
			mCustomWebView.setVisibility(View.VISIBLE);
			WebSettings webSetting = mCustomWebView.getSettings();
	        webSetting.setSupportZoom(false);
	        webSetting.setBuiltInZoomControls(false);
	        webSetting.setUseWideViewPort(false);
	        webSetting.setJavaScriptEnabled(true);
	        webSetting.setLoadWithOverviewMode(true);
	        String webInfo = "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html charset=utf-8\" />"+
	        		"<body style=\"padding:10px;\">" + 
					"</div><span style=\"font-size:%d px;\">%s<br/></span></div></body></html>";
	        mCustomWebView.loadDataWithBaseURL(null, String.format(webInfo, 16, 
	        		replaceHtml(mHeaderObj.has("content")? mHeaderObj.optString("content") : mHeaderObj.optString("intro"))), mimeType, encoding, null);
	        		//mHeaderObj.has("content")? mHeaderObj.optString("content") : mHeaderObj.optString("intro")), mimeType, encoding, null);
			
			if(mHeaderObj.has("images")){
				mImagesPathArr = mHeaderObj.optJSONArray("images");
				mPageGuide = (PageGuide) mHeaderView.findViewById(R.id.pageguide);
				mPageGuide.setParams(mImagesPathArr.length(), Utils.dipToPixels(InformationDetailsActivity.this, 7), Utils.dipToPixels(InformationDetailsActivity.this, 7));
				
				mAutoGallery = (AutoGallery) mHeaderView.findViewById(R.id.gallery);
				mAutoGallery.setAdapter(new ContentAdapter(){
					@Override
					public int getCount() {
						// TODO Auto-generated method stub
						if(mImagesPathArr != null && mImagesPathArr.length() > 0){
							return mImagesPathArr.length();
						}
						return 0;
					}
					@SuppressWarnings("deprecation")
					@Override
					public View getView(int position, View convertView, ViewGroup parent) {
						// TODO Auto-generated method stub
						if(convertView == null){
							convertView = ViewGroup.inflate(InformationDetailsActivity.this, R.layout.listcell_myschoolyard_headercell, null);
							convertView.setLayoutParams(new Gallery.LayoutParams(LayoutParams.MATCH_PARENT, Utils.realHeight(InformationDetailsActivity.this, 350)));
						}
						convertView.findViewById(R.id.preview).setVisibility(View.GONE);
						JSONObject obj = mImagesPathArr.optJSONObject(position);
						if(obj != null){
							ImageLoader.getInstance().displayImage(obj.optString("path"), ((ImageView)convertView.findViewById(R.id.imageview)), ImageLoaderConfigs.displayImageOptionsBg);
						}
						return convertView;
					}
				});
				
				mAutoGallery.setOnItemSelectedListener(new OnItemSelectedListener() {
					@Override
					public void onItemSelected(AdapterView<?> parent,
							View view, int position, long id) {
						// TODO Auto-generated method stub
						mPageGuide.setSelect(position);
					}
					@Override
					public void onNothingSelected(AdapterView<?> parent) {
						// TODO Auto-generated method stub
						
					}
				});
				
				mAutoGallery.setOnItemClickListener(new OnItemClickListener() {
					@Override
					public void onItemClick(AdapterView<?> parent, View view,
							int position, long id) {
						// TODO Auto-generated method stub
						if(mCustomCommentView != null){
							mCustomCommentView.resetCustomEditview(InformationDetailsActivity.this);
						}
						PhotoViewer photoViewer = new PhotoViewer(InformationDetailsActivity.this, position);
						photoViewer.setPathArr(mImagesPathArr);
						photoViewer.showPhotoViewer(view);
					}
				});
				
				mAutoGallery.setSelection(0);
			}
		}
		mCustomCommentView = (CustomCommentView) findViewById(R.id.custom_commentview);
		if(mHeaderObj == null || !mHeaderObj.has("allowComment") || mHeaderObj.optBoolean("allowComment")){
			mCustomCommentView.setVisibility(View.VISIBLE);
			mHeaderView.findViewById(R.id.group_comment).setVisibility(View.VISIBLE);
			mHeaderView.findViewById(R.id.gourp_comment_line1).setVisibility(View.VISIBLE);
			mHeaderView.findViewById(R.id.gourp_comment_line2).setVisibility(View.VISIBLE);
		}
		else{
			mHeaderView.findViewById(R.id.group_comment).setVisibility(View.GONE);
			mHeaderView.findViewById(R.id.gourp_comment_line1).setVisibility(View.GONE);
			mHeaderView.findViewById(R.id.gourp_comment_line2).setVisibility(View.GONE);
			mCustomCommentView.setVisibility(View.GONE);
		}
	}
	
	private void initListView(){
		mListView = (PullToRefreshListView) findViewById(R.id.pullto_listview);
		initHeaderView();
		mListView.setAdapter(mListAdapter = new ContentAdapter(){
			@Override
			public int getCount() {
				// TODO Auto-generated method stub
				if(mCommentArr != null && mCommentArr.length() > 0){
					return mCommentArr.length();
				}
				return 0;
			}

			@Override
			public View getView(final int position, View convertView, ViewGroup parent) {
				// TODO Auto-generated method stub
				if(convertView == null){
					convertView = ViewGroup.inflate(InformationDetailsActivity.this, R.layout.listcell_postdetails, null);
					convertView.setLayoutParams(new AbsListView.LayoutParams(android.widget.AbsListView.LayoutParams.MATCH_PARENT, android.widget.AbsListView.LayoutParams.WRAP_CONTENT));
				}
				
				final JSONObject obj = mCommentArr.optJSONObject(position);
				if(obj != null){
					JSONObject fromUserObj = null;
					JSONObject toUserObj = null;
					String fromUserName = null;
					String toUserName = null;
					
					if(obj.has("fromUser")){
						fromUserObj = obj.optJSONObject("fromUser");
						fromUserName = fromUserObj.optString("nickName");
					}
					
					if(fromUserObj == null){
						return convertView;
					}
					
					if(obj.has("toUser")){
						toUserObj = obj.optJSONObject("toUser");
						toUserName = toUserObj.optString("nickName");
					}
					
					String finalComment;
					SpannableString spanName;
					
					if(toUserObj != null){
						finalComment = String.format(getResources().getString(R.string.comment_reply_more), fromUserName, toUserName, obj.optString("content"));
						
						spanName = new SpannableString(EmojiUtils.getEmojiCharSequence(finalComment));
						TouchableSpan touchableSpan1 = new TouchableSpan(InformationDetailsActivity.this, Color.argb(255, 82, 107, 146), Color.argb(255, 82, 107, 146), Color.argb(90, 0, 0, 0));
						touchableSpan1.setPressString(fromUserName);
						touchableSpan1.setPressUserId(fromUserObj.optString("id"));
						spanName.setSpan(touchableSpan1, finalComment.toString().indexOf(fromUserName), fromUserName.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
						
						TouchableSpan touchableSpan2 = new TouchableSpan(InformationDetailsActivity.this, Color.argb(255, 82, 107, 146), Color.argb(255, 82, 107, 146), Color.argb(90, 0, 0, 0));
						touchableSpan2.setPressString(toUserName);
						touchableSpan2.setPressUserId(toUserObj.optString("id"));
						spanName.setSpan(touchableSpan2, finalComment.toString().indexOf(toUserName, fromUserName.length()), finalComment.toString().indexOf(toUserName, fromUserName.length()) + toUserName.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
					}
					else{
						finalComment = String.format(getResources().getString(R.string.comment_reply), fromUserName, obj.optString("content"));
						
						spanName = new SpannableString(EmojiUtils.getEmojiCharSequence(finalComment));
						TouchableSpan touchableSpan1 = new TouchableSpan(InformationDetailsActivity.this, Color.argb(255, 82, 107, 146), Color.argb(255, 82, 107, 146), Color.argb(90, 0, 0, 0));
						touchableSpan1.setPressString(fromUserName);
						touchableSpan1.setPressUserId(fromUserObj.optString("id"));
						spanName.setSpan(touchableSpan1, finalComment.toString().indexOf(fromUserName), fromUserName.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
					}
					
					((ConsumeTextView)convertView.findViewById(R.id.textview_title)).setText(spanName, BufferType.SPANNABLE);
					((ConsumeTextView)convertView.findViewById(R.id.textview_title)).setMovementMethod(ConsumeTextView.LocalLinkMovementMethod.getInstance());
				
					((TextView)convertView.findViewById(R.id.textview_date)).setText(Utils.friendlyTime(InformationDetailsActivity.this, obj.optLong("createDate")));
				
					ImageLoader.getInstance().displayImage(fromUserObj.optString("headImage"), ((ImageView)convertView.findViewById(R.id.imageview)), ImageLoaderConfigs.displayImageOptionsRound);
					convertView.findViewById(R.id.group_imageview).setOnClickListener(new OnClickListener() {
						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
							if(!DataLoader.getInstance().isLogin()){
								Toast.makeText(InformationDetailsActivity.this, getResources().getString(R.string.login_notify), Toast.LENGTH_SHORT).show();
								startActivity(new Intent(InformationDetailsActivity.this, LoginActivity.class));
								InformationDetailsActivity.this.overridePendingTransition(R.anim.push_bottom_in,  R.anim.push_bottom_out);
								return;
							}
							String id = null;
							try {
								id = obj.optJSONObject("fromUser").optString("id");
							} catch (Exception e) {
								// TODO: handle exception
							}
							if(id == null){
								return;
							}
							Intent intent = null;
							if(id.equalsIgnoreCase(DataLoader.getInstance().getHeaderUsetId())){
								intent = new Intent(InformationDetailsActivity.this, MyPageActivity.class);
							}
							else{
								intent = new Intent(InformationDetailsActivity.this, PersonPageActivity.class);
								intent.putExtra("id", id);
							}
							startActivity(intent);
						}
					});
					
					convertView.findViewById(R.id.group_content).setOnClickListener(new OnListCommentClick(fromUserObj, obj.optString("id"), position));
				}
				
				return convertView;
			}
		});
		if(mHeaderObj == null || !mHeaderObj.has("allowComment") || mHeaderObj.optBoolean("allowComment")){
			mListView.setRemoreable(true);
			mListView.setOnRemoreListener(new OnRemoreListener() {
				
				@Override
				public void onRemore() {
					// TODO Auto-generated method stub
					mPageNo++;
					mIsReadMore = true;
					HashMap<String, Object> params = new HashMap<String, Object>();
					params.put("resourceType", getIntent().getIntExtra("resouceType", 4));
					params.put("resourceId", getIntent().getStringExtra("id"));
					params.put("pageNo", mPageNo);
					params.put("pageSize", "20");
					DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_DiscussListDiscussions, params, InformationDetailsActivity.this);
				}
			});
			
			HashMap<String, Object> params = new HashMap<String, Object>();
			params.put("resourceType", getIntent().getIntExtra("resouceType", 4));
			params.put("resourceId", getIntent().getStringExtra("id"));
			params.put("pageNo", mPageNo);
			params.put("pageSize", "20");
			DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_DiscussListDiscussions, params, InformationDetailsActivity.this);
		}
		else{
			removeDialogCustom();
		}
	}
	
	public void onShareClick(View view){
		if(mHeaderObj != null && ((HSESchoolApp)getApplicationContext()).umSocialServiceShare != null){
			((HSESchoolApp)getApplicationContext()).setUmengShareObj(InformationDetailsActivity.this, mHeaderObj, Configs.UmengShare_Infomation);
			((HSESchoolApp)getApplicationContext()).umSocialServiceShare.openShare(InformationDetailsActivity.this, false);
			((HSESchoolApp)getApplicationContext()).setOnFavoriteClick(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					String myId = DataLoader.getInstance().getHeaderUsetId();
					if(myId == null || myId.length() == 0){
						Toast.makeText(InformationDetailsActivity.this, getResources().getString(R.string.login_notify), Toast.LENGTH_SHORT).show();
						startActivity(new Intent(InformationDetailsActivity.this, LoginActivity.class));
						overridePendingTransition(R.anim.push_bottom_in,  R.anim.push_bottom_out);
						return;
					}
					
					if(mHeaderObj.has("favoriteStatus") && mHeaderObj.optString("favoriteStatus").equalsIgnoreCase("0")){
						Toast.makeText(InformationDetailsActivity.this, getResources().getString(R.string.favorite_already), Toast.LENGTH_SHORT).show();
						return;
					}
					
					showDialogCustom(DIALOG_CUSTOM);
					HashMap<String, Object> params = new HashMap<String, Object>();
					params.put("resourceType", getIntent().getIntExtra("resouceType", 4) + "");
					params.put("resourceIds", mHeaderObj.optString("id"));
					params.put("statuses", "0");
					DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_FavoriteApply, params, InformationDetailsActivity.this);
				}
			});
			((HSESchoolApp)getApplicationContext()).setOnFriendClick(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					String myId = DataLoader.getInstance().getHeaderUsetId();
					if(myId == null || myId.length() == 0){
						Toast.makeText(InformationDetailsActivity.this, getResources().getString(R.string.login_notify), Toast.LENGTH_SHORT).show();
						startActivity(new Intent(InformationDetailsActivity.this, LoginActivity.class));
						overridePendingTransition(R.anim.push_bottom_in,  R.anim.push_bottom_out);
						return;
					}
					startActivity(new Intent(InformationDetailsActivity.this, ContactListActivity.class));
				}
			});
		}
	}
	
	public void onSendClick(View v){
		if(!DataLoader.getInstance().isLogin()){
			new AlertDialog.Builder(InformationDetailsActivity.this)
			.setCancelable(false)
		 	.setMessage(getResources().getString(R.string.login_notify))
		 	.setPositiveButton(getResources().getString(R.string.confirm), new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					// TODO Auto-generated method stub
					startActivity(new Intent(InformationDetailsActivity.this, LoginActivity.class));
					overridePendingTransition(R.anim.push_bottom_in,  R.anim.push_bottom_out);
				}
			})
			.setNegativeButton(getResources().getString(R.string.cancel), null)
		 	.show();
			return;
		}
		if(!Utils.isInternetAvaiable(InformationDetailsActivity.this)){
			Toast.makeText(InformationDetailsActivity.this, getResources().getString(R.string.internet_avaiable_false), Toast.LENGTH_SHORT).show();
			return;
		}
		String comment = mCustomCommentView.getEditView().getText().toString();
		if(comment.length() > 300){
			Toast.makeText(InformationDetailsActivity.this, getResources().getString(R.string.publish_content_up), Toast.LENGTH_SHORT).show();
			return;
		}
		showDialogCustom(DIALOG_CUSTOM);
		HashMap<String, Object> params = new HashMap<String, Object>();
		if(mCommentReplyUserId != null){
			params.put("toUserId", mCommentReplyUserId);
			params.put("resourceType", "6");
			params.put("resourceId", mCommentReplyId);
		}
		else{
			params.put("resourceType", getIntent().getIntExtra("resouceType", 4));
			params.put("resourceId", getIntent().getStringExtra("id"));
		}
		params.put("content", EmojiUtils.convertToUnicode(comment));
		DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_DiscussSendDiscussion, params, InformationDetailsActivity.this);
	}
	
	class OnListCommentClick implements OnClickListener{
		JSONObject obj;
		String postId;
		int position;
		public OnListCommentClick(JSONObject obj, String postId, int position){
			this.obj = obj;
			this.postId = postId;
			this.position = position;
		}
		
		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			if(obj == null){
				return;
			}
			String userId = DataLoader.getInstance().getHeaderUsetId();
			if(userId == null || userId.length() == 0){
				new AlertDialog.Builder(InformationDetailsActivity.this)
				.setCancelable(false)
			 	.setMessage(getResources().getString(R.string.login_notify))
			 	.setPositiveButton(getResources().getString(R.string.confirm), new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub
						startActivity(new Intent(InformationDetailsActivity.this, LoginActivity.class));
						overridePendingTransition(R.anim.push_bottom_in,  R.anim.push_bottom_out);
					}
				})
				.setNegativeButton(getResources().getString(R.string.cancel), null)
			 	.show();
				return;
			}
			if(obj.optString("id").equalsIgnoreCase(userId)){
				mCommentDeleteIndex = position;
				new AlertDialog.Builder(InformationDetailsActivity.this)
		        .setMessage(R.string.comment_detele)
		        .setPositiveButton(R.string.delete, new DialogInterface.OnClickListener() {
		            public void onClick(DialogInterface dialog, int whichButton) {
		            	showDialogCustom(DIALOG_CUSTOM);
		            	HashMap<String, Object> params = new HashMap<String, Object>();
						params.put("discussionId", postId);
						DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_DiscussDeleteDiscussion, params, InformationDetailsActivity.this);
		            }
		        })
		        .setNegativeButton(R.string.cancel, null).show();
				if(mCustomCommentView != null){
					mCustomCommentView.hideKeyBoard(InformationDetailsActivity.this);
				}
				return;
			}
			mCommentReplyUserId = obj.optString("id");
			mCommentReplyId = postId;
			if(mCustomCommentView != null){
				mCustomCommentView.requestFouce();
				mCustomCommentView.setEditViewHint(String.format(getResources().getString(R.string.custom_reply_user), obj.optString("nickName")));
				mCustomCommentView.setEditViewText("");
			}
		}
	}
	
	private String replaceHtml(String data){
		
		int width = ((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getWidth();
        width =(int)((float)width / getResources().getDisplayMetrics().density) - Utils.dipToPixels(this, 20);
		
		return data.replaceAll("&lt;", "<")
				.replaceAll("&gt;", ">")
				.replaceAll("&#xd;", "")
				.replaceAll("&#xD;", "")
				.replaceAll("&nbsp;", " ")
				.replaceAll("&quot;", "\"")
				.replaceAll("(<img[^>]*?)(\\s+width\\s*=\\s*\\S+)","$1")
				.replaceAll("(<img[^>]*?)(\\s+height\\s*=\\s*\\S+)","$1")
				.replaceAll("(<img[^>]*?)(\\s+style\\s*=\\s*\\S+)","$1")
				.replaceAll("<img", "<img width=\"" + width + "\"")
				.replaceAll("(<IMG[^>]*?)(\\s+width\\s*=\\s*\\S+)","$1")
				.replaceAll("(<IMG[^>]*?)(\\s+height\\s*=\\s*\\S+)","$1")
				.replaceAll("(<IMG[^>]*?)(\\s+style\\s*=\\s*\\S+)","$1")
				.replaceAll("<IMG", "<img width=\"" + width + "\"");
	}
	
	private void callHiddenWebViewMethod(String name){
        if (mCustomWebView != null){
            try{
                Method method = WebView.class.getMethod(name);
                method.invoke(mCustomWebView);
            }
            catch (Exception e){
            }
        }
    }
	
	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		if(mCustomWebView != null){
			mCustomWebView.setVisibility(View.GONE);
            if(mMainLayout != null){
                mMainLayout.removeView(mCustomWebView);
            }
            mCustomWebView.removeAllViews();
            mCustomWebView.destroy();
        }
	}
	
	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();

		if(mCustomWebView != null){
            if(Utils.getAndroidSDKVersion() < 11){
                callHiddenWebViewMethod("onResume");
            }
            else{
            	mCustomWebView.onResume();
            }
        }
	}
	
    @Override
    protected void onPause(){
        super.onPause();
        if(mCustomWebView != null){
            if(Utils.getAndroidSDKVersion() < 11){
            	mCustomWebView.pauseTimers();
                if (isFinishing()){
                	mCustomWebView.loadUrl("about:blank");
                    setContentView(new FrameLayout(this));
                }
                callHiddenWebViewMethod("onPause");
            }
            else{
            	mCustomWebView.onPause();
            }
        }
    }

	@Override
	public void taskFinished(TaskType type, Object result, boolean isHistory) {
		// TODO Auto-generated method stub
		super.taskFinished(type, result, isHistory);
		
		if(mListView != null){
			mListView.complete();
		}
		if(result == null){
			removeDialogCustom();
			return;
		}
		
		if(result instanceof Error){
			removeDialogCustom();
			try {
				Toast.makeText(InformationDetailsActivity.this, ((Error) result).getMessage(), Toast.LENGTH_SHORT).show();
			} catch (Exception e) {
				// TODO: handle exception
			}
			return;
		}
		
		switch (type) {
		case TaskOrMethod_InformationGetInformation:
			if(result instanceof JSONObject && ((JSONObject)result).has("item")){
				mHeaderObj = ((JSONObject)result).optJSONObject("item");
			}
			initListView();
			break;
			
		case TaskOrMethod_DiscussListDiscussions:
			removeDialogCustom();
			if(result instanceof JSONObject && ((JSONObject)result).has("items")){
				JSONArray temp = ((JSONObject)result).optJSONArray("items");
				if(temp != null && temp.length() > 10){
					mListView.setRemoreable(true);
				}
				else{
					mListView.setRemoreable(false);
				}
				EmojiUtils.replaceEmoji(temp);
				if(mIsReadMore){
					mIsReadMore = false;
					mCommentArr = DataLoader.getInstance().joinJSONArray(mCommentArr, temp);
				}
				else{
					mCommentArr = temp;
				}
			}
			else{
				mListView.setRemoreable(false);
			}
			if(mListAdapter != null){
				mListAdapter.notifyDataSetChanged();
			}
			break;
			
		case TaskOrMethod_DiscussSendDiscussion:
			mCommentReplyUserId = null;
			mCommentReplyId = null;
			removeDialogCustom();
			if(result instanceof JSONObject && ((JSONObject)result).has("item")){
				JSONObject item = ((JSONObject)result).optJSONObject("item");
				EmojiUtils.replaceEmoji(item);
				mCommentArr = DataLoader.getInstance().insertStacktop(mCommentArr, item);
			}
			if(mCustomCommentView != null){
				mCustomCommentView.resetCustomEditview(InformationDetailsActivity.this);
			}
			if(mListAdapter != null){
				mListAdapter.notifyDataSetChanged();
			}
			break;
			
		case TaskOrMethod_DiscussDeleteDiscussion:
			removeDialogCustom();
			if(mCommentArr != null){
				Utils.removeIndex(mCommentArr, mCommentDeleteIndex);
			}
			if(mListAdapter != null){
				mListAdapter.notifyDataSetChanged();
			}
			break;
			
		case TaskOrMethod_FavoriteApply:
			if(mHeaderObj != null){
				try {
					mHeaderObj.put("favoriteStatus", "0");
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
			removeDialogCustom();
			Toast.makeText(InformationDetailsActivity.this, getResources().getString(R.string.umeng_favorite_success), Toast.LENGTH_SHORT).show();
			break;
		default:
			break;
		}
	}
}
