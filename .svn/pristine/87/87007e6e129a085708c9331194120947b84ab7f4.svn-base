package com.zhuochuang.hsej;

import java.text.SimpleDateFormat;

import org.json.JSONArray;
import org.json.JSONObject;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.layout.emoji.EmojiTextView;
import com.model.ImageLoaderConfigs;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.util.Utils;

@SuppressLint("SimpleDateFormat")
public class ChatMsgViewAdapter extends BaseAdapter {
	public final int ITEM_RIGHT = 0;
	public final int ITEM_LEFT = 1;
	private JSONArray mChatData;
	private Context mContext;
    private String mFromId, mHeaderUrl;
    private int mMsgType;//好友， 意见反馈，在线咨询
    
    private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat HMFormat = new SimpleDateFormat("HH:mm");

	public ChatMsgViewAdapter(Context context, String fromId, String fromHeader) {
		this.mContext = context;
		this.mFromId = fromId;
		this.mHeaderUrl = fromHeader;
	}
	
	public void setData(JSONArray chatData){
		this.mChatData = chatData;
	}

	public void setMsgType(int msgType){
		mMsgType = msgType;
	}
	
	public int getCount() {
		return null == mChatData ? 0 : mChatData.length();
	}

	public Object getItem(int position) {
		return mChatData.optJSONObject(position);
	}

	public long getItemId(int position) {
		return position;
	}

	public int getItemViewType(int position) {
		// TODO Auto-generated method stub
		JSONObject entity = mChatData.optJSONObject(position);
        JSONObject fromUser = entity.optJSONObject("fromUser");
        
        if(fromUser != null){
        	if (mFromId.equals(fromUser.optString("id"))) {
    			return ITEM_RIGHT;
    		} else {
    			return ITEM_LEFT;
    		}
        }else {
        	return ITEM_LEFT; 
		}
	}
	
	public boolean isMine(JSONObject obj){
		JSONObject fromUser = obj.optJSONObject("fromUser");
		if(fromUser != null){
			if (mFromId.equals(fromUser.optString("id"))) {
				return true;
			}
		}
		
		return false;
	}
	
	/*private boolean hasFromUser(int position){
		JSONObject entity = mChatData.optJSONObject(position);
		if(entity == null){
			return false;
		}
		return entity.has("fromUser");
	}*/

	public int getViewTypeCount() {
		// TODO Auto-generated method stub
		return 2;
	}

	public View getView(final int position, View convertView, ViewGroup parent) {

		if(mChatData != null && mChatData.length() > 0){
			final JSONObject entity = mChatData.optJSONObject(position);
			final int cellType = getItemViewType(position);

			ViewHolder viewHolder = null;
			if (convertView == null) {
				if (cellType == ITEM_RIGHT) {
					convertView = ViewGroup.inflate(mContext, R.layout.chatting_item_msg_text_right, null);
				} else {
					convertView = ViewGroup.inflate(mContext, R.layout.chatting_item_msg_text_left, null);
				}

				viewHolder = new ViewHolder();
				viewHolder.userHead = (ImageView) convertView.findViewById(R.id.iv_userhead);
				viewHolder.msgTime = (TextView) convertView.findViewById(R.id.tv_sendtime);
				viewHolder.msgContent = (EmojiTextView) convertView.findViewById(R.id.tv_chatcontent);

				convertView.setTag(viewHolder);
			} else {
				viewHolder = (ViewHolder) convertView.getTag();
			}

			long timeTemp = entity.optLong("createDate");
			if(position == 0){
				/*if(sdf.format(new Date()).equalsIgnoreCase(sdf.format(new Date(timeTemp)))){
				    viewHolder.msgTime.setText(HMFormat.format(new Date(timeTemp)));
				}
				else{
					viewHolder.msgTime.setText(Utils.getAlmostTime(mContext, timeTemp));
				}*/
				viewHolder.msgTime.setText(Utils.getAlmostTimeDay(mContext, entity.optLong("createDate")));
				viewHolder.msgTime.setVisibility(View.VISIBLE);
			}
			else{
				long timeTempLast = mChatData.optJSONObject(position - 1).optLong("createDate");
				if(Utils.isShowTimeDay(timeTemp, timeTempLast)){
				//if(Utils.isShowTime(timeTemp, timeTempLast)){
					//viewHolder.msgTime.setText(Utils.getChatTime(mContext, timeTemp));
					viewHolder.msgTime.setText(Utils.getAlmostTimeDay(mContext, timeTemp));
					viewHolder.msgTime.setVisibility(View.VISIBLE);
				}
				else{
					viewHolder.msgTime.setVisibility(View.GONE);
				}
			}
			
			viewHolder.msgContent.setEmojiText(entity.optString("content"));
			
			String headerUrl = "";
			if (cellType == ITEM_RIGHT) {
				headerUrl = mHeaderUrl;
				viewHolder.userHead.setBackgroundResource(0);
				ImageLoader.getInstance().displayImage(headerUrl, viewHolder.userHead, ImageLoaderConfigs.displayImageOptionsRound);
			}
			else {
				JSONObject fromUser = entity.optJSONObject("fromUser");
				if(fromUser != null){
					headerUrl = fromUser.has("thumbImage") ? fromUser.optString("thumbImage") : "";
				}
				switch (mMsgType) {
				case 0:
					viewHolder.userHead.setBackgroundResource(0);
					ImageLoader.getInstance().displayImage(headerUrl, viewHolder.userHead, ImageLoaderConfigs.displayImageOptionsRound);
					break;
				case 13:
					ImageLoader.getInstance().displayImage("", viewHolder.userHead, ImageLoaderConfigs.displayImageOptions);
					viewHolder.userHead.setBackgroundResource(R.drawable.consultationicon);
					break;
				case 14:
					ImageLoader.getInstance().displayImage("", viewHolder.userHead, ImageLoaderConfigs.displayImageOptions);
					viewHolder.userHead.setBackgroundResource(R.drawable.feedbackicon);
					break;
				default:
					break;
				}
			}
			
			viewHolder.userHead.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {
					Intent intent = null;
					
					if (cellType == ITEM_RIGHT) {
						intent = new Intent(mContext, MyPageActivity.class);
					}else {
						switch (mMsgType) {
						case 0:
							if(mChatData != null && mChatData.length() > 0){
								
							}
					        JSONObject fromUser = entity.optJSONObject("fromUser");
					        if(fromUser != null){
					        	intent = new Intent(mContext, PersonPageActivity.class);
								intent.putExtra("id", fromUser.optString("id"));
					        }
							break;
						case 13:
							break;
						case 14:
							break;
						default:
							break;
						}
					}
					if(intent != null){
						mContext.startActivity(intent);
					}
				}
			});
		}

		return convertView;
	}

	private class ViewHolder {
		public ImageView userHead;
		public TextView msgTime;
		public EmojiTextView msgContent;
	}

}
