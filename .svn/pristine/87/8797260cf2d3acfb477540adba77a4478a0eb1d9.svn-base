package com.zhuochuang.hsej;

import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.layout.ConsumeTextView;
import com.layout.CustomCommentView;
import com.layout.Mdialog;
import com.layout.PullToRefreshListView;
import com.layout.PullToRefreshListView.OnRemoreListener;
import com.layout.ReportPopupWindows;
import com.layout.ReportPopupWindows.OnPopupWindowsClickListen;
import com.layout.TouchableSpan;
import com.layout.emoji.EmojiTextView;
import com.layout.emoji.EmojiUtils;
import com.layout.photoview.PhotoViewer;
import com.model.DataLoader;
import com.model.EventManager;
import com.model.ImageLoaderConfigs;
import com.model.TaskType;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.umeng.socialize.utils.Log;
import com.util.AutoGallery;
import com.util.ContentAdapter;
import com.util.PageGuide;
import com.util.Utils;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.text.Spannable;
import android.text.SpannableString;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.Gallery;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.TextView.BufferType;

@SuppressLint("SetJavaScriptEnabled")
@SuppressWarnings("deprecation")
public class PostDetailsActivity extends BaseActivity {
	private static final int ITEM_N = 0;// 分享
	private static final int ITEM_NA = 1;// 举报
	private View mHeaderView;
	private PullToRefreshListView mListView;
	private ContentAdapter mListAdapter;
	private AutoGallery mAutoGallery;
	private PageGuide mPageGuide;
	private CustomCommentView mCustomCommentView;
	private JSONObject mHeaderObj;
	private JSONArray mImagesPathArr;;
	private JSONArray mCommentArr;
	private com.layout.ReportPopupWindows popupWindows;

	private int mPageNo = 1;
	private String mCommentReplyUserId = null;
	private String mCommentReplyId = null;
	private int mCommentDeleteIndex = 0;

	private boolean mIsReadMore = false;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_post_information_details);
		setTitleText(R.string.postdetails_title);
		mMainLayout.findViewById(R.id.ico_share_more).setVisibility(
				View.VISIBLE);
		((HSESchoolApp) getApplicationContext()).setUmengShareParams(
				getIntent().getIntExtra("resouceType", 9) + "", getIntent()
						.getStringExtra("id"), "");
		popupWindows = new ReportPopupWindows(this);
		showDialogCustom(DIALOG_CUSTOM);
		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("postId", getIntent().getStringExtra("id"));
		DataLoader.getInstance().startTaskForResult(
				TaskType.TaskOrMethod_hobbygroupGetPost, params,
				PostDetailsActivity.this);
	}

	private void initHeaderView() {
		mHeaderView = ViewGroup.inflate(PostDetailsActivity.this,
				R.layout.listcell_postdetails_header, null);
		mListView.addHeaderView(mHeaderView);
		mHeaderView.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (mCustomCommentView != null) {
					mCustomCommentView
							.resetCustomEditview(PostDetailsActivity.this);
					mCommentReplyUserId = null;
					mCommentReplyId = null;
				}
			}
		});
		if (mHeaderObj != null) {
			((TextView) mHeaderView.findViewById(R.id.textview_title))
					.setText(mHeaderObj.optString("name"));
			String owner = "";
			String img = "";
			if (mHeaderObj.has("user")) {
				final JSONObject user = mHeaderObj.optJSONObject("user");
				if (user != null) {
					owner = user.optString("nickName");
					img = user.optString("headImage");
				}
			}
			((TextView) mHeaderView.findViewById(R.id.textview_owner))
					.setText(owner);
			((TextView) mHeaderView.findViewById(R.id.textview_ownerdate))
					.setText(Utils.getAlmostTime(PostDetailsActivity.this,
							mHeaderObj.optLong("createDate")));
			ImageLoader.getInstance().displayImage(img,
					((ImageView) mHeaderView.findViewById(R.id.imageview)),
					ImageLoaderConfigs.displayImageOptionsRound);

			String content = mHeaderObj.has("content") ? mHeaderObj
					.optString("content") : mHeaderObj.optString("intro");
			((EmojiTextView) mHeaderView.findViewById(R.id.textview_content))
					.setEmojiText(EmojiUtils.convertToTag(content));

			if (mHeaderObj.has("images")) {
				mImagesPathArr = mHeaderObj.optJSONArray("images");
				mPageGuide = (PageGuide) mHeaderView
						.findViewById(R.id.pageguide);
				mPageGuide.setParams(mImagesPathArr.length(),
						Utils.dipToPixels(PostDetailsActivity.this, 7),
						Utils.dipToPixels(PostDetailsActivity.this, 7));

				mAutoGallery = (AutoGallery) mHeaderView
						.findViewById(R.id.gallery);
				mAutoGallery.setAdapter(new ContentAdapter() {

					@Override
					public int getCount() {
						// TODO Auto-generated method stub
						if (mImagesPathArr != null
								&& mImagesPathArr.length() > 0) {
							return mImagesPathArr.length();
						}
						return 0;
					}

					@Override
					public View getView(int position, View convertView,
							ViewGroup parent) {
						// TODO Auto-generated method stub
						if (convertView == null) {
							convertView = ViewGroup.inflate(
									PostDetailsActivity.this,
									R.layout.listcell_myschoolyard_headercell,
									null);
							convertView
									.setLayoutParams(new Gallery.LayoutParams(
											LayoutParams.MATCH_PARENT,
											Utils.realHeight(
													PostDetailsActivity.this,
													350)));
						}

						convertView.findViewById(R.id.preview).setVisibility(
								View.GONE);

						JSONObject obj = mImagesPathArr.optJSONObject(position);
						if (obj != null) {
							ImageLoader.getInstance().displayImage(
									obj.optString("path"),
									((ImageView) convertView
											.findViewById(R.id.imageview)),
									ImageLoaderConfigs.displayImageOptionsBg);
						}
						return convertView;
					}
				});

				mAutoGallery
						.setOnItemSelectedListener(new OnItemSelectedListener() {

							@Override
							public void onItemSelected(AdapterView<?> parent,
									View view, int position, long id) {
								// TODO Auto-generated method stub
								mPageGuide.setSelect(position);
							}

							@Override
							public void onNothingSelected(AdapterView<?> parent) {
								// TODO Auto-generated method stub

							}
						});

				mAutoGallery.setOnItemClickListener(new OnItemClickListener() {

					@Override
					public void onItemClick(AdapterView<?> parent, View view,
							int position, long id) {
						// TODO Auto-generated method stub
						if (mCustomCommentView != null) {
							mCustomCommentView
									.resetCustomEditview(PostDetailsActivity.this);
						}
						PhotoViewer photoViewer = new PhotoViewer(
								PostDetailsActivity.this, position);
						photoViewer.setPathArr(mImagesPathArr);
						photoViewer.showPhotoViewer(view);
					}
				});

				mAutoGallery.setSelection(0);
			}

		}
		mCustomCommentView = (CustomCommentView) findViewById(R.id.custom_commentview);
		if (mHeaderObj == null || !mHeaderObj.has("allowComment")
				|| mHeaderObj.optBoolean("allowComment")) {
			mCustomCommentView.setVisibility(View.VISIBLE);
			mHeaderView.findViewById(R.id.group_comment).setVisibility(
					View.VISIBLE);
			mHeaderView.findViewById(R.id.gourp_comment_line1).setVisibility(
					View.VISIBLE);
			mHeaderView.findViewById(R.id.gourp_comment_line2).setVisibility(
					View.VISIBLE);
		} else {
			mHeaderView.findViewById(R.id.group_comment).setVisibility(
					View.GONE);
			mHeaderView.findViewById(R.id.gourp_comment_line1).setVisibility(
					View.GONE);
			mHeaderView.findViewById(R.id.gourp_comment_line2).setVisibility(
					View.GONE);
			mCustomCommentView.setVisibility(View.GONE);
		}

	}

	private void initListView() {
		mListView = (PullToRefreshListView) findViewById(R.id.pullto_listview);
		initHeaderView();
		mListView.setAdapter(mListAdapter = new ContentAdapter() {

			@Override
			public int getCount() {
				// TODO Auto-generated method stub
				if (mCommentArr != null && mCommentArr.length() > 0) {
					return mCommentArr.length();
				}
				return 0;
			}

			@Override
			public View getView(final int position, View convertView,
					ViewGroup parent) {
				// TODO Auto-generated method stub
				if (convertView == null) {
					convertView = ViewGroup.inflate(PostDetailsActivity.this,
							R.layout.listcell_postdetails, null);
					convertView
							.setLayoutParams(new AbsListView.LayoutParams(
									android.widget.AbsListView.LayoutParams.MATCH_PARENT,
									android.widget.AbsListView.LayoutParams.WRAP_CONTENT));
				}

				final JSONObject obj = mCommentArr.optJSONObject(position);
				if (obj != null) {
					JSONObject fromUserObj = null;
					JSONObject toUserObj = null;
					String fromUserName = null;
					String toUserName = null;
					if (obj.has("fromUser")) {
						fromUserObj = obj.optJSONObject("fromUser");
						fromUserName = fromUserObj.optString("nickName");
					}

					if (fromUserObj == null) {
						return convertView;
					}

					if (obj.has("toUser")) {
						toUserObj = obj.optJSONObject("toUser");
						toUserName = toUserObj.optString("nickName");
					}

					String finalComment;
					SpannableString spanName;

					if (toUserObj != null) {
						finalComment = String.format(
								getResources().getString(
										R.string.comment_reply_more),
								fromUserName, toUserName,
								obj.optString("content"));

						spanName = new SpannableString(EmojiUtils
								.getEmojiCharSequence(finalComment));
						TouchableSpan touchableSpan1 = new TouchableSpan(
								PostDetailsActivity.this, Color.argb(255, 82,
										107, 146), Color
										.argb(255, 82, 107, 146), Color.argb(
										90, 0, 0, 0));
						touchableSpan1.setPressString(fromUserName);
						touchableSpan1.setPressUserId(fromUserObj
								.optString("id"));
						spanName.setSpan(touchableSpan1, finalComment
								.toString().indexOf(fromUserName), fromUserName
								.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

						TouchableSpan touchableSpan2 = new TouchableSpan(
								PostDetailsActivity.this, Color.argb(255, 82,
										107, 146), Color
										.argb(255, 82, 107, 146), Color.argb(
										90, 0, 0, 0));
						touchableSpan2.setPressString(toUserName);
						touchableSpan2.setPressUserId(toUserObj.optString("id"));
						spanName.setSpan(
								touchableSpan2,
								finalComment.toString().indexOf(toUserName,
										fromUserName.length()),
								finalComment.toString().indexOf(toUserName,
										fromUserName.length())
										+ toUserName.length(),
								Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
					} else {
						finalComment = String.format(
								getResources()
										.getString(R.string.comment_reply),
								fromUserName, obj.optString("content"));

						spanName = new SpannableString(EmojiUtils
								.getEmojiCharSequence(finalComment));
						TouchableSpan touchableSpan1 = new TouchableSpan(
								PostDetailsActivity.this, Color.argb(255, 82,
										107, 146), Color
										.argb(255, 82, 107, 146), Color.argb(
										90, 0, 0, 0));
						touchableSpan1.setPressString(fromUserName);
						touchableSpan1.setPressUserId(fromUserObj
								.optString("id"));
						spanName.setSpan(touchableSpan1, finalComment
								.toString().indexOf(fromUserName), fromUserName
								.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
					}

					((ConsumeTextView) convertView
							.findViewById(R.id.textview_title)).setText(
							spanName, BufferType.SPANNABLE);
					((ConsumeTextView) convertView
							.findViewById(R.id.textview_title))
							.setMovementMethod(ConsumeTextView.LocalLinkMovementMethod
									.getInstance());

					((TextView) convertView.findViewById(R.id.textview_date))
							.setText(Utils.friendlyTime(
									PostDetailsActivity.this,
									obj.optLong("createDate")));

					ImageLoader.getInstance().displayImage(
							fromUserObj.optString("headImage"),
							((ImageView) convertView
									.findViewById(R.id.imageview)),
							ImageLoaderConfigs.displayImageOptionsRound);
					convertView.findViewById(R.id.group_imageview)
							.setOnClickListener(new OnClickListener() {
								@Override
								public void onClick(View v) {
									// TODO Auto-generated method stub
									if (!DataLoader.getInstance().isLogin()) {
										Toast.makeText(
												PostDetailsActivity.this,
												getResources().getString(
														R.string.login_notify),
												Toast.LENGTH_SHORT).show();
										startActivity(new Intent(
												PostDetailsActivity.this,
												LoginActivity.class));
										PostDetailsActivity.this
												.overridePendingTransition(
														R.anim.push_bottom_in,
														R.anim.push_bottom_out);
										return;
									}
									String id = null;
									try {
										id = obj.optJSONObject("fromUser")
												.optString("id");
									} catch (Exception e) {
										// TODO: handle exception
									}
									if (id == null) {
										return;
									}
									Intent intent = null;
									if (id.equalsIgnoreCase(DataLoader
											.getInstance().getHeaderUsetId())) {
										intent = new Intent(
												PostDetailsActivity.this,
												MyPageActivity.class);
									} else {
										intent = new Intent(
												PostDetailsActivity.this,
												PersonPageActivity.class);
										intent.putExtra("id", id);
									}
									startActivity(intent);
								}
							});

					convertView.findViewById(R.id.group_content)
							.setOnClickListener(
									new OnListCommentClick(fromUserObj, obj
											.optString("id"), position));
				}

				return convertView;
			}
		});
		if (mHeaderObj == null || !mHeaderObj.has("allowComment")
				|| mHeaderObj.optBoolean("allowComment")) {
			mListView.setRemoreable(true);
			mListView.setOnRemoreListener(new OnRemoreListener() {

				@Override
				public void onRemore() {
					// TODO Auto-generated method stub
					mPageNo++;
					mIsReadMore = true;
					HashMap<String, Object> params = new HashMap<String, Object>();
					params.put("resourceType",
							getIntent().getIntExtra("resouceType", 9));
					params.put("resourceId", getIntent().getStringExtra("id"));
					params.put("pageNo", mPageNo);
					params.put("pageSize", "20");
					DataLoader.getInstance().startTaskForResult(
							TaskType.TaskOrMethod_DiscussListDiscussions,
							params, PostDetailsActivity.this);
				}
			});

			HashMap<String, Object> params = new HashMap<String, Object>();
			params.put("resourceType", getIntent()
					.getIntExtra("resouceType", 9));
			params.put("resourceId", getIntent().getStringExtra("id"));
			params.put("pageNo", mPageNo);
			params.put("pageSize", "20");
			DataLoader.getInstance().startTaskForResult(
					TaskType.TaskOrMethod_DiscussListDiscussions, params,
					PostDetailsActivity.this);
		} else {
			removeDialogCustom();
		}
	}

	public void onShareMoreClick(View view) {
		if (mHeaderObj != null
				&& ((HSESchoolApp) getApplicationContext()).umSocialServiceShare != null) {
			((HSESchoolApp) getApplicationContext()).setUmengShareObj(
					PostDetailsActivity.this, mHeaderObj, true);
			((HSESchoolApp) getApplicationContext()).umSocialServiceShare
					.openShare(PostDetailsActivity.this, false);
			((HSESchoolApp) getApplicationContext())
					.setOnFavoriteClick(new OnClickListener() {

						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
							String myId = DataLoader.getInstance()
									.getHeaderUsetId();
							if (myId == null || myId.length() == 0) {
								Toast.makeText(
										PostDetailsActivity.this,
										getResources().getString(
												R.string.login_notify),
										Toast.LENGTH_SHORT).show();
								startActivity(new Intent(
										PostDetailsActivity.this,
										LoginActivity.class));
								overridePendingTransition(
										R.anim.push_bottom_in,
										R.anim.push_bottom_out);
								return;
							}

							if (mHeaderObj.has("favoriteStatus")
									&& mHeaderObj.optString("favoriteStatus")
											.equalsIgnoreCase("0")) {
								Toast.makeText(
										PostDetailsActivity.this,
										getResources().getString(
												R.string.favorite_already),
										Toast.LENGTH_SHORT).show();
								return;
							}

							showDialogCustom(DIALOG_CUSTOM);
							HashMap<String, Object> params = new HashMap<String, Object>();
							params.put("resourceType",
									getIntent().getIntExtra("resouceType", 9)
											+ "");
							params.put("resourceIds",
									mHeaderObj.optString("id"));
							params.put("statuses", "0");
							DataLoader.getInstance().startTaskForResult(
									TaskType.TaskOrMethod_FavoriteApply,
									params, PostDetailsActivity.this);
						}
					});
			((HSESchoolApp) getApplicationContext())
					.setOnFriendClick(new OnClickListener() {

						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
							String myId = DataLoader.getInstance()
									.getHeaderUsetId();
							if (myId == null || myId.length() == 0) {
								Toast.makeText(
										PostDetailsActivity.this,
										getResources().getString(
												R.string.login_notify),
										Toast.LENGTH_SHORT).show();
								startActivity(new Intent(
										PostDetailsActivity.this,
										LoginActivity.class));
								overridePendingTransition(
										R.anim.push_bottom_in,
										R.anim.push_bottom_out);
								return;
							}
							startActivity(new Intent(PostDetailsActivity.this,
									ContactListActivity.class));
						}
					});
			((HSESchoolApp) getApplicationContext())
					.setOnReportClick(new OnClickListener() {

						@Override
						public void onClick(View arg0) {
							
							if (!DataLoader.getInstance().isLogin()) {
								new AlertDialog.Builder(
										PostDetailsActivity.this)
										.setCancelable(false)
										.setMessage(PostDetailsActivity.this
										.getResources()
										.getString(R.string.login_notify))
										.setPositiveButton(PostDetailsActivity.this
										.getResources()
										.getString(R.string.confirm),
										new DialogInterface.OnClickListener() {
											@Override
										public void onClick(
										DialogInterface dialog,int which) {
											PostDetailsActivity.this.startActivity(new Intent(PostDetailsActivity.this,
											LoginActivity.class));
											((Activity) PostDetailsActivity.this).overridePendingTransition(
											R.anim.push_bottom_in,R.anim.push_bottom_out);}})
										.setNegativeButton(
												PostDetailsActivity.this
														.getResources()
														.getString(
																R.string.cancel),
												null).show();
								return;
							}
							Mdialog mydialog = new Mdialog(
									PostDetailsActivity.this,
									mCommentReplyUserId, getIntent()
											.getStringExtra("id"));
							mydialog.setCancelable(true);
							mydialog.show();

						}
					});
		}
	}

	public void onSendClick(View v) {
		if (!DataLoader.getInstance().isLogin()) {
			new AlertDialog.Builder(PostDetailsActivity.this)
					.setCancelable(false)
					.setMessage(getResources().getString(R.string.login_notify))
					.setPositiveButton(
							getResources().getString(R.string.confirm),
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub
									startActivity(new Intent(
											PostDetailsActivity.this,
											LoginActivity.class));
									overridePendingTransition(
											R.anim.push_bottom_in,
											R.anim.push_bottom_out);
								}
							})
					.setNegativeButton(
							getResources().getString(R.string.cancel), null)
					.show();
			return;
		}
		if (!Utils.isInternetAvaiable(PostDetailsActivity.this)) {
			Toast.makeText(PostDetailsActivity.this,
					getResources().getString(R.string.internet_avaiable_false),
					Toast.LENGTH_SHORT).show();
			return;
		}
		String comment = mCustomCommentView.getEditView().getText().toString();
		if (comment.length() > 300) {
			Toast.makeText(PostDetailsActivity.this,
					getResources().getString(R.string.publish_content_up),
					Toast.LENGTH_SHORT).show();
			return;
		}
		showDialogCustom(DIALOG_CUSTOM);
		HashMap<String, Object> params = new HashMap<String, Object>();
		if (mCommentReplyUserId != null) {
			params.put("toUserId", mCommentReplyUserId);
			params.put("resourceType", "6");
			params.put("resourceId", mCommentReplyId);
		} else {
			params.put("resourceType", getIntent()
					.getIntExtra("resouceType", 9));
			params.put("resourceId", getIntent().getStringExtra("id"));
		}
		params.put("content", EmojiUtils.convertToUnicode(comment));
		DataLoader.getInstance().startTaskForResult(
				TaskType.TaskOrMethod_DiscussSendDiscussion, params,
				PostDetailsActivity.this);
	}

	public void onHeaderImgClick(View view) {
		if (!DataLoader.getInstance().isLogin()) {
			Toast.makeText(PostDetailsActivity.this,
					getResources().getString(R.string.login_notify),
					Toast.LENGTH_SHORT).show();
			startActivity(new Intent(PostDetailsActivity.this,
					LoginActivity.class));
			overridePendingTransition(R.anim.push_bottom_in,
					R.anim.push_bottom_out);
			return;
		}
		if (mHeaderObj != null && mHeaderObj.has("user")) {
			String id = mHeaderObj.optJSONObject("user").optString("id");

			Intent intent = null;
			if (id.equalsIgnoreCase(DataLoader.getInstance().getHeaderUsetId())) {
				intent = new Intent(PostDetailsActivity.this,
						MyPageActivity.class);
			} else {
				intent = new Intent(PostDetailsActivity.this,
						PersonPageActivity.class);
				intent.putExtra("id", id);
			}
			startActivity(intent);
		}
	}

	class OnListCommentClick implements OnClickListener {
		JSONObject obj;
		String postId;
		int position;

		public OnListCommentClick(JSONObject obj, String postId, int position) {
			this.obj = obj;
			this.postId = postId;
			this.position = position;
		}

		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			if (obj == null) {
				return;
			}
			String userId = DataLoader.getInstance().getHeaderUsetId();
			if (userId == null || userId.length() == 0) {
				new AlertDialog.Builder(PostDetailsActivity.this)
						.setCancelable(false)
						.setMessage(
								getResources().getString(R.string.login_notify))
						.setPositiveButton(
								getResources().getString(R.string.confirm),
								new DialogInterface.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										// TODO Auto-generated method stub
										startActivity(new Intent(
												PostDetailsActivity.this,
												LoginActivity.class));
										overridePendingTransition(
												R.anim.push_bottom_in,
												R.anim.push_bottom_out);
									}
								})
						.setNegativeButton(
								getResources().getString(R.string.cancel), null)
						.show();
				return;
			}
			if (obj.optString("id").equalsIgnoreCase(userId)) {
				mCommentDeleteIndex = position;
				new AlertDialog.Builder(PostDetailsActivity.this)
						.setMessage(R.string.comment_detele)
						.setPositiveButton(R.string.delete,
								new DialogInterface.OnClickListener() {
									public void onClick(DialogInterface dialog,
											int whichButton) {
										showDialogCustom(DIALOG_CUSTOM);
										HashMap<String, Object> params = new HashMap<String, Object>();
										params.put("discussionId", postId);
										DataLoader
												.getInstance()
												.startTaskForResult(
														TaskType.TaskOrMethod_DiscussDeleteDiscussion,
														params,
														PostDetailsActivity.this);
									}
								}).setNegativeButton(R.string.cancel, null)
						.show();
				if (mCustomCommentView != null) {
					mCustomCommentView.hideKeyBoard(PostDetailsActivity.this);
				}
				return;
			}
			mCommentReplyUserId = obj.optString("id");
			mCommentReplyId = postId;
			if (mCustomCommentView != null) {
				mCustomCommentView.requestFouce();
				mCustomCommentView.setEditViewHint(String.format(getResources()
						.getString(R.string.custom_reply_user), obj
						.optString("nickName")));
				mCustomCommentView.setEditViewText("");
			}
		}
	}

	@Override
	public void taskFinished(TaskType type, Object result, boolean isHistory) {
		// TODO Auto-generated method stub
		super.taskFinished(type, result, isHistory);

		if (mListView != null) {
			mListView.complete();
		}
		if (result == null) {
			removeDialogCustom();
			return;
		}

		if (result instanceof Error) {
			removeDialogCustom();
			try {
				Toast.makeText(PostDetailsActivity.this,
						((Error) result).getMessage(), Toast.LENGTH_SHORT)
						.show();
			} catch (Exception e) {
				// TODO: handle exception
			}
			return;
		}

		switch (type) {
		case TaskOrMethod_hobbygroupGetPost:
			if (result instanceof JSONObject
					&& ((JSONObject) result).has("item")) {
				mHeaderObj = ((JSONObject) result).optJSONObject("item");
			}
			initListView();
			break;

		case TaskOrMethod_DiscussListDiscussions:
			removeDialogCustom();
			if (result instanceof JSONObject
					&& ((JSONObject) result).has("items")) {
				JSONArray temp = ((JSONObject) result).optJSONArray("items");
				if (temp != null && temp.length() > 10) {
					mListView.setRemoreable(true);
				} else {
					mListView.setRemoreable(false);
				}
				EmojiUtils.replaceEmoji(temp);
				if (mIsReadMore) {
					mIsReadMore = false;
					mCommentArr = DataLoader.getInstance().joinJSONArray(
							mCommentArr, temp);
				} else {
					mCommentArr = temp;
				}
			} else {
				mListView.setRemoreable(false);
			}
			if (mListAdapter != null) {
				mListAdapter.notifyDataSetChanged();
			}
			break;

		case TaskOrMethod_DiscussSendDiscussion:
			mCommentReplyUserId = null;
			mCommentReplyId = null;
			removeDialogCustom();
			if (result instanceof JSONObject
					&& ((JSONObject) result).has("item")) {
				JSONObject item = ((JSONObject) result).optJSONObject("item");
				EmojiUtils.replaceEmoji(item);
				mCommentArr = DataLoader.getInstance().insertStacktop(
						mCommentArr, item);
				EventManager.getInstance().sendMessage(
						EventManager.EventType_PostCommentCount,
						getIntent().getStringExtra("id"), mCommentArr.length());
			}
			if (mCustomCommentView != null) {
				mCustomCommentView
						.resetCustomEditview(PostDetailsActivity.this);
			}
			if (mListAdapter != null) {
				mListAdapter.notifyDataSetChanged();
			}
			break;

		case TaskOrMethod_DiscussDeleteDiscussion:
			removeDialogCustom();
			if (mCommentArr != null) {
				Utils.removeIndex(mCommentArr, mCommentDeleteIndex);
			}
			if (mListAdapter != null) {
				mListAdapter.notifyDataSetChanged();
			}
			break;

		case TaskOrMethod_FavoriteApply:
			if (mHeaderObj != null) {
				try {
					mHeaderObj.put("favoriteStatus", "0");
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
			removeDialogCustom();
			Toast.makeText(PostDetailsActivity.this,
					getResources().getString(R.string.umeng_favorite_success),
					Toast.LENGTH_SHORT).show();	
			break;
		
		default:
			break;
		}
	}
}
