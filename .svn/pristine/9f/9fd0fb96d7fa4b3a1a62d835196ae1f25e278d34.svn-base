package com.zhuochuang.hsej;

import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.layout.PullToRefreshListView;
import com.layout.PullToRefreshListView.OnRefreshListener;
import com.layout.emoji.EmojiTextView;
import com.layout.emoji.EmojiUtils;
import com.model.DataLoader;
import com.model.DefineHandler;
import com.model.EventManager;
import com.model.ImageLoaderConfigs;
import com.model.TaskType;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.util.ContentAdapter;
import com.util.Utils;
/**
 * 我的聊天
 * @author Dion
 *
 */
@SuppressLint("InflateParams")
public class MyFriendsChatFragment extends BaseFragment{
	
	private PullToRefreshListView mListView = null;
	private ContentAdapter mAdapter = null;
	private JSONArray mDateArray = null;
	
	private ViewGroup mHeaderMsgNotifyView;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		mMainLayout = (ViewGroup)LayoutInflater.from(mActivity).inflate(R.layout.fragment_chat_my_firends, null);
		initListView ();
	}
	
	private void initListView (){
		
		mListView = (PullToRefreshListView)mMainLayout.findViewById(R.id.pullToListView_chat_myfirends);
		mHeaderMsgNotifyView = (ViewGroup) ViewGroup.inflate(mActivity, R.layout.header_my_chat, null);
		mHeaderMsgNotifyView.setVisibility(View.GONE);
		
		mListView.addHeaderView(mHeaderMsgNotifyView);
		mListView.setAdapter(mAdapter = new ContentAdapter(){
			@Override
			public int getCount() {
				if(mDateArray != null && mDateArray.length() > 0){
					return mDateArray.length();
				}
				return 0;
			}
			
			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				if(convertView == null){
					convertView = LayoutInflater.from(mActivity).inflate(R.layout.listcell_chat_firends, null);
				}
				
				JSONObject obj = mDateArray.optJSONObject(position);
				if(obj != null){
					((TextView)convertView.findViewById(R.id.chat_time_firend)).setText(Utils.friendlyTime(mActivity,obj.optLong("createDate")));
					((EmojiTextView)convertView.findViewById(R.id.chat_msg_firend)).setEmojiText(obj.optString("content"));
					if(obj.has("fromUser")){
						JSONObject formObj = obj.optJSONObject("fromUser");
						if(formObj != null){
							ImageLoader.getInstance().displayImage(formObj.optString("headImage"), 
									(ImageView)convertView.findViewById(R.id.chat_firend_head_image), 
									ImageLoaderConfigs.displayImageOptionsRound);
							((TextView)convertView.findViewById(R.id.chat_name_firend)).setText(formObj.optString("xm"));
						}
						else{
							ImageLoader.getInstance().displayImage("", (ImageView)convertView.findViewById(R.id.chat_firend_head_image), 
									ImageLoaderConfigs.displayImageOptionsRound);
							((TextView)convertView.findViewById(R.id.chat_name_firend)).setText("");
						}
					}
					
					if(obj.has("unreadNum") && obj.optInt("unreadNum", 0) != 0){
						convertView.findViewById(R.id.chat_msg_num).setVisibility(View.VISIBLE);
						int num = obj.optInt("unreadNum", 0) > 99? 99 : obj.optInt("unreadNum", 0);
						((TextView)convertView.findViewById(R.id.chat_msg_num)).setText(num + "");
					}
					else{
						convertView.findViewById(R.id.chat_msg_num).setVisibility(View.GONE);
						((TextView)convertView.findViewById(R.id.chat_msg_num)).setText("");
					}
				}
				
				return convertView;
			}
		});
		
		mListView.setOnRefreshListener(new OnRefreshListener() {
			
			@Override
			public void onRefresh() {
				HashMap<String, Object> params = new HashMap<String, Object>();
				params.put("resourceType", "1");
				params.put("pagerSize", 1000);
				DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_MessageClassifiedMsgs, params, MyFriendsChatFragment.this);
			}
		});
		
		mListView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				if(mDateArray == null || mDateArray.length() == 0){
					return;
				}
				((TextView)arg1.findViewById(R.id.chat_msg_num)).setVisibility(View.GONE);
				JSONObject obj = mDateArray.optJSONObject(arg2-2);
				if(obj != null){
					if(obj.has("unreadNum") && obj.optInt("unreadNum", 0) != 0){
						try {
							obj.put("unreadNum", 0);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						isRedPointTag();
					}
					Intent intent = new Intent(mActivity, FeedbackActivity.class);
					intent.putExtra("data", obj.toString());
					startActivity(intent);
				}
			}
		});
		
		mListView.startRefresh();
	}
	
	/**
	 * 是否显示tab红点
	 * 
	 */
	private void isRedPointTag(){
		if(mDateArray == null || mDateArray.length() == 0){
			return;
		}
		boolean isRedTag = false;
		for(int i = 0; i < mDateArray.length(); i++){
			JSONObject item = mDateArray.optJSONObject(i);
			if(item.has("unreadNum") && item.optInt("unreadNum", 0) != 0){
				isRedTag = true;
				break;
			}
		}
		if(!isRedTag){
			DefineHandler.updateMsgNotify(mActivity, DefineHandler.MsgType_FriendChat);
			EventManager.getInstance().sendMessage(EventManager.EventType_MsgMyfriendChange, new Object());
		}
	}
	
	private void setViewStatus(ViewGroup viewGroup, int visible){
		for(int i = 0; i < viewGroup.getChildCount(); i++){
			View view = viewGroup.getChildAt(i);
			view.setVisibility(visible);
		}
		viewGroup.setVisibility(visible);
	}
	
	@Override
	public void taskFinished(TaskType type, Object result, boolean isHistory) {
		super.taskFinished(type, result, isHistory);
		
		if(mListView != null){
			mListView.complete();
		}
		
		if(result == null){
			return;
		}
		
		if(result instanceof Error){
			try {
				Toast.makeText(mActivity, ((Error) result).getMessage(), Toast.LENGTH_SHORT).show();
			} catch (Exception e) {
				// TODO: handle exception
			}
			return;
		}
		
		switch (type) {
		case TaskOrMethod_MessageClassifiedMsgs:
			if(result instanceof JSONObject){
				if(((JSONObject)result).has("items")){
					mDateArray = ((JSONObject)result).optJSONArray("items");
					EmojiUtils.replaceEmoji(mDateArray);
				}
			}
			
			if(mDateArray == null || mDateArray.length() == 0){
				//mHeaderMsgNotifyView.setVisibility(View.VISIBLE);
				setViewStatus(mHeaderMsgNotifyView, View.VISIBLE);
			}
			else{
				//mHeaderMsgNotifyView.setVisibility(View.GONE);
				setViewStatus(mHeaderMsgNotifyView, View.GONE);
				isRedPointTag();
			}
			if(mAdapter != null){
				mAdapter.notifyDataSetChanged();
			}
			
			break;

		default:
			break;
		}
	}
}
