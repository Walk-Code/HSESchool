package com.zhuochuang.hsej;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONObject;

import com.layout.roundproress.RoundCornerProgressBar;
import com.model.DataLoader;
import com.model.EventManager;
import com.model.ImageLoaderConfigs;
import com.model.TaskType;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.util.ContentAdapter;
import com.util.Utils;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class VoteActivity extends BaseActivity{

	ListView mListView;
	View mHeaderView;
	ContentAdapter mAdapter;
	JSONObject mVoteObj;
	JSONArray mVoteList;
	ArrayList<String> mIdList = new ArrayList<>();
	
	@Override
	protected void onCreate(Bundle arg0) {
		// TODO Auto-generated method stub
		super.onCreate(arg0);
		setContentView(R.layout.activity_vote);
		
		findViewById(R.id.textview_checkvote).setVisibility(View.VISIBLE);
		
		mHeaderView = ViewGroup.inflate(VoteActivity.this, R.layout.listcell_vote_header, null);
		mListView = (ListView) findViewById(R.id.listview);
		mListView.addHeaderView(mHeaderView, null, false);
		mListView.setAdapter(mAdapter = new ContentAdapter(){

			@Override
			public int getCount() {
				// TODO Auto-generated method stub
				if(mVoteList != null && mVoteList.length() > 0){
					return mVoteList.length();
				}
				return 0;
			}

			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				// TODO Auto-generated method stub
				if(convertView == null){
					convertView = ViewGroup.inflate(VoteActivity.this, R.layout.listcell_vote, null);
					LinearLayout.LayoutParams lp = (LayoutParams) convertView.findViewById(R.id.imageview).getLayoutParams();
					lp.height = Utils.realVoteListImageHeight(VoteActivity.this);
					convertView.findViewById(R.id.imageview).setLayoutParams(lp);
				}
				
				JSONObject obj = mVoteList.optJSONObject(position);
				if(obj != null){
					((TextView)convertView.findViewById(R.id.textview_name)).setText(obj.optString("titleName"));
					((TextView)convertView.findViewById(R.id.textview_declare)).setText(obj.optString("content"));
					ImageLoader.getInstance().displayImage(obj.optString("imageUrl"), (ImageView)convertView.findViewById(R.id.imageview), ImageLoaderConfigs.displayImageOptions);
					
					switch (getIntent().getIntExtra("favoriteStatus", 0)) {
					case 6:
						convertView.findViewById(R.id.group_select).setVisibility(View.GONE);
						convertView.findViewById(R.id.group_roundprogress).setVisibility(View.VISIBLE);
						convertView.findViewById(R.id.textview_commit_percent).setVisibility(View.VISIBLE);
						
						RoundCornerProgressBar progressBar = (RoundCornerProgressBar) convertView.findViewById(R.id.view_roundprogress);
						progressBar.setBackgroundColor(Color.TRANSPARENT);
						progressBar.setProgressColor(Color.parseColor("#dc5151"));
						progressBar.setMax(mVoteObj.optInt("voteNumber", 0));
						progressBar.setProgress(obj.optInt("number", 0));
						//((TextView)convertView.findViewById(R.id.textview_commit_percent)).setText(getResources().getString(R.string.vote_commit_num)
						//		+ (position * 20) + getResources().getString(R.string.vote_perecnt));
						((TextView)convertView.findViewById(R.id.textview_commit_percent)).setText(
								getResources().getString(R.string.vote_commit_num) + obj.optString("percent"));
						break;
					default:
						convertView.findViewById(R.id.group_select).setVisibility(View.VISIBLE);
						convertView.findViewById(R.id.group_select).setOnClickListener(new OnCheckClick(obj));
						convertView.findViewById(R.id.group_roundprogress).setVisibility(View.GONE);
						convertView.findViewById(R.id.textview_commit_percent).setVisibility(View.GONE);
						break;
					}
				}
				return convertView;
			}
		});
		
		showDialogCustom(DIALOG_CUSTOM);
		DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_VoteGetVoteTopic, 
				DataLoader.getInstance().getVoteGetVoteTopicParams(getIntent().getStringExtra("resourceType"), 
						getIntent().getStringExtra("id")), VoteActivity.this);
	}
	
	private void setHeaderData(){
		if(mVoteObj == null){
			return;
		}
		setTitleText(mVoteObj.optString("titleName"));
		
		LinearLayout.LayoutParams lp = (LayoutParams) mHeaderView.findViewById(R.id.imageview).getLayoutParams();
		lp.height = Utils.realVoteImageHeight(VoteActivity.this);
		mHeaderView.findViewById(R.id.imageview).setLayoutParams(lp);
		ImageLoader.getInstance().displayImage(mVoteObj.optString("imageUrl"), (ImageView)mHeaderView.findViewById(R.id.imageview), ImageLoaderConfigs.displayImageOptions);
		((TextView)mHeaderView.findViewById(R.id.textview_content)).setText(mVoteObj.optString("content"));
		
		switch (getIntent().getIntExtra("favoriteStatus", 0)) {
		case 6:
			mHeaderView.findViewById(R.id.textview_num).setVisibility(View.VISIBLE);
			((TextView)mHeaderView.findViewById(R.id.textview_num)).setText(String.format(getResources().getString(R.string.vote_join_num), mVoteObj.optString("voteNumber")));
			break;

		default:
			mHeaderView.findViewById(R.id.textview_num).setVisibility(View.GONE);
			break;
		}
	}
	
	class OnCheckClick implements OnClickListener{

		JSONObject obj;
		public OnCheckClick(JSONObject obj){
			this.obj = obj;
		}
		
		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			if(mVoteObj == null || obj == null){
				return;
			}
			if(mIdList.size() < mVoteObj.optInt("optionNumber", 0)){
				if(mIdList.contains(obj.optString("id"))){
					mIdList.remove(obj.optString("id"));
				}
				else{
					mIdList.add(obj.optString("id"));
				}
			}
			else{
				Toast.makeText(VoteActivity.this, String.format(getResources().getString(R.string.survey_option_max), mVoteObj.optInt("optionNumber", 0)), Toast.LENGTH_SHORT).show();
			}
		}
	}
	
	public void onVoteResultClick(View view){
		Intent intent = new Intent(VoteActivity.this, VoteResultActivity.class);
		startActivity(intent);
	}
	
	public void onCommitBtnClick(View view){
		if(mIdList.size() == 0){
			Toast.makeText(VoteActivity.this, getResources().getString(R.string.vote_commit_null), Toast.LENGTH_SHORT).show();
			return;
		}
		String value = "";
		for(String id : mIdList){
			value += id + ",";
		}
		if(!Utils.isTextEmpty(value) && value.contains(",")){
			value = value.substring(0, value.length() - 1);
		}
		showDialogCustom(DIALOG_CUSTOM);
		DataLoader.getInstance().startTaskForResult(TaskType.TaskOrMethod_VoteVoteSubmit, 
				DataLoader.getInstance().getVoteVoteSubmitParams(mVoteObj.optString("id"), value), VoteActivity.this);
	}

	@Override
	public void taskFinished(TaskType type, Object result, boolean isHistory) {
		// TODO Auto-generated method stub
		super.taskFinished(type, result, isHistory);
		removeDialogCustom();
		if(result == null){
			return;
		}
		
		if(result instanceof Error){
			Toast.makeText(VoteActivity.this, ((Error) result).getMessage(), Toast.LENGTH_SHORT).show();
			return;
		}
		switch (type) {
		case TaskOrMethod_VoteGetVoteTopic:
			if(result instanceof JSONObject && ((JSONObject)result).has("item")){
				mVoteObj = ((JSONObject)result).optJSONObject("item");
				if(mVoteObj != null && mVoteObj.has("isEnd") && mVoteObj.optBoolean("isEnd", false)){
					getIntent().putExtra("favoriteStatus", 6);
				}
				setHeaderData();
			}
			if(mAdapter != null){
				mAdapter.notifyDataSetChanged();
			}
			break;
		case TaskOrMethod_VoteVoteSubmit:
			EventManager.getInstance().sendMessage(EventManager.EventType_VoteChange, getIntent().getStringExtra("id"));
			getIntent().putExtra("favoriteStatus", 6);
			if(result instanceof JSONObject && ((JSONObject)result).has("item")){
				mVoteObj = ((JSONObject)result).optJSONObject("item");
				setHeaderData();
			}
			if(mAdapter != null){
				mAdapter.notifyDataSetChanged();
			}
			break;

		default:
			break;
		}
	}

}
