package com.util;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;

import org.json.JSONArray;

import com.model.Configs;
import com.zhuochuang.hsej.R;

import android.R.integer;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.provider.Settings;
import android.telephony.TelephonyManager;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.view.inputmethod.InputMethodManager;

@SuppressLint({ "SimpleDateFormat", "DefaultLocale" })
public class Utils {
	
	private static String operatorString = null;
	private static String userAgent = null;
	
	/**
	 * 获取运营商， 为空默认46000
	 * @param context
	 * @return
	 */
	public static String getOperatorString(Context context){
		if(operatorString == null){
			TelephonyManager telephonyManager = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  
		    operatorString = telephonyManager.getSimOperator();
		}
		
		if(operatorString == null || operatorString.length() == 0){
			operatorString = "46000";
		}
		
		return operatorString;
	}
	
	/**
	 * 获取useragent
	 * @param context
	 * @return
	 */
	public static String getUserAgent(Context context){
		if(userAgent == null){
			userAgent = android.os.Build.MODEL + "/" + Utils.getVersionName(context) 
					+ "(Android;"+android.os.Build.VERSION.RELEASE + ";" 
					+ context.getResources().getDisplayMetrics().widthPixels 
					+ "x" + context.getResources().getDisplayMetrics().heightPixels
					+ ";s;" + getOperatorString(context) + ";wifi)";
		}
		
		return userAgent;
	}
	
    public static int dipToPixels(Context context, float dip){
		return (int)(context.getResources().getDisplayMetrics().density * dip);
	}
    
	public static int realHeight(Context context, int scaleHeight){
		return (int) ((double)context.getResources().getDisplayMetrics().widthPixels / ((double)640 / (double)scaleHeight));
	}
	
	public static int realSchoolBannerHeight(Context context){
		return (int) ((double)context.getResources().getDisplayMetrics().widthPixels / ((double)750 / (double)398));
	}
	
	public static int realSchoolListCellHeight(Context context){
		return (int) ((double)context.getResources().getDisplayMetrics().widthPixels / ((double)750 / (double)243));
	}
	
	public static int realServiceBannerHeight(Context context){
		return (int) ((double)context.getResources().getDisplayMetrics().widthPixels / ((double)750 / (double)408));
	}
	
	public static int realVoteImageHeight(Context context){
		return (int) ((double)context.getResources().getDisplayMetrics().widthPixels / ((double)700 / (double)394));
	}
	
	public static int realVoteListImageHeight(Context context){
		return (int) ((double)context.getResources().getDisplayMetrics().widthPixels / ((double)666 / (double)376));
	}
	
	public static String getClientInfo(Context context){
		return android.os.Build.MODEL + "|android|" +android.os.Build.VERSION.RELEASE + "|" + getVersionName(context) + "|" + getVersionNumber(context) + "|" + context.getResources().getDisplayMetrics().widthPixels + "*" + context.getResources().getDisplayMetrics().heightPixels +"|" + context.getResources().getDisplayMetrics().densityDpi;
	}
	
	public static void removeSoftKeyboard(Activity activity){
		 InputMethodManager imm =(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);
		 if(activity.getCurrentFocus() != null)
			imm.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(), 0); 
	}
	
	public static boolean isTextEmpty(String text){
		if(TextUtils.isEmpty(text) || text.replaceAll(" ", "").length() == 0){
			return true;
		}
		return false;
	}
	
	@SuppressWarnings("unchecked")
	public static void removeIndex(JSONArray arr, int index){
		if(index < 0)
			return;
		try {
			Field valuesField=JSONArray.class.getDeclaredField("values");
			valuesField.setAccessible(true);
			List<Object> values=(List<Object>)valuesField.get(arr);
			if(index >= values.size()){
				return;
			}
			values.remove(index);
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	public static String getChangeCount(int count){
		if(count >= 10000){
			return new DecimalFormat("###.#").format((double)count / (double)10000) + "w";
		}
		return count + "";
	}
	
	/**
	 * 活动人数变颜色
	 * @param numStr
	 * @param changeStr
	 * @return
	 */
	public static SpannableString getActivityNum(String numStr, String changeStr){
		SpannableString spanName = new SpannableString(numStr);
		spanName.setSpan(new ForegroundColorSpan(Color.argb(255, 219, 77, 73)),
				9, 9 + changeStr.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

		return spanName;
	}
	
	/**
	 * 活动时间
	 * @param context
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	public static String getTimeQuantum(Context context, long startTime, long endTime){
		if(startTime == 0) {
			return"unknown";
		}
		SimpleDateFormat formatYMDHM = new SimpleDateFormat(context.getResources().getString(R.string.time_format2));
		SimpleDateFormat formatHM = new SimpleDateFormat(context.getResources().getString(R.string.time_format3));
		
		String start = formatYMDHM.format(new Date(startTime));

		if(endTime == 0){
			return start;
		}
		
		String tempEnd = formatYMDHM.format(new Date(endTime));
		
		if(start.equalsIgnoreCase(tempEnd)){
			return start;
		}
		
		return start + " ~ " + formatHM.format(new Date(endTime));
	}
	
	/**
	 * 调查问卷时间
	 * @param context
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	public static String getSurveyTimeQuantum(Context context, long startTime, long endTime){
		if(startTime == 0) {
			return"unknown";
		}
		SimpleDateFormat formatYMDHM = new SimpleDateFormat(context.getResources().getString(R.string.time_format1));
		SimpleDateFormat formatHM = new SimpleDateFormat(context.getResources().getString(R.string.time_format4));
		
		String start = formatYMDHM.format(new Date(startTime));

		if(endTime == 0){
			return start;
		}
		
		String tempEnd = formatYMDHM.format(new Date(endTime));
		
		if(start.equalsIgnoreCase(tempEnd)){
			return start;
		}
		
		return start + " ~ " + formatHM.format(new Date(endTime));
	}
	
	public static String[] getPicResolution(String url){
		if(url == null || url.length() == 0 || !url.contains("_") || !url.contains(".") || !url.contains("x")){
			return null;
		}
		try {
			return url.substring(url.lastIndexOf("_") + 1).split("\\.")[0].split("x");
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	* 鍥炴敹 bitmap 鍑忓皬绯荤粺鍗犵敤鐨勮祫婧愭秷鑰�
	*/
	public static void destoryBimap(Bitmap photo) {
		if (photo !=null && !photo.isRecycled()) {
			photo.recycle();
			photo = null;
		}
	}
    
	/**
	 * 楠岃瘉鎵嬫満鏍煎紡
	 */
	public static boolean isMobileNO(String mobiles) {
		/*
		绉诲姩锛�34銆�35銆�36銆�37銆�38銆�39銆�50銆�51銆�57(TD)銆�58銆�59銆�87銆�88
		鑱旈�锛�30銆�31銆�32銆�52銆�55銆�56銆�85銆�86
		鐢典俊锛�33銆�53銆�80銆�89銆侊紙1349鍗�锛�
		鎬荤粨璧锋潵灏辨槸绗竴浣嶅繀瀹氫负1锛岀浜屼綅蹇呭畾涓�鎴�鎴�锛屽叾浠栦綅缃殑鍙互涓�-9
		*/
		//"[1]"浠ｈ〃绗�浣嶄负鏁板瓧1锛�[358]"浠ｈ〃绗簩浣嶅彲浠ヤ负3銆�銆�涓殑涓�釜锛�\\d{9}"浠ｈ〃鍚庨潰鏄彲浠ユ槸0锝�鐨勬暟瀛楋紝鏈�浣嶃�
		String telRegex = "[1][358]\\d{9}";
		if (TextUtils.isEmpty(mobiles)) {
			return false;
		}
		return mobiles.matches(telRegex);
    }
    
	public static String getAlmostTimeDay(Context context, long timeMills){
		SimpleDateFormat format = new SimpleDateFormat(context.getResources().getString(R.string.time_format2));
		if(timeMills == 0) {
			return"unknown";
		}
		return format.format(new Date(timeMills));
	}
	
	public static String getAlmostTime(long timeMills){
		if(timeMills == 0) {
	    	return"unknown";
	    }
		return formatYMDHM.format(new Date(timeMills));
	}
	
	public static String getAlmostTime(Context context, long timeMills){
		SimpleDateFormat formatYMDHMS = new SimpleDateFormat(context.getResources().getString(R.string.time_format1));
		if(timeMills == 0) {
			return"unknown";
		}
		return formatYMDHMS.format(new Date(timeMills));
	}
	
	public static boolean isShowTimeDay(long current, long last){
		long ct = current/86400000;
	    long lt = last/86400000;
	    int days = (int)(ct - lt);
	    if(days != 0){
	    	return true;
	    }
		return false;
	 }
	
	public static boolean isShowTime(long current, long last){
		if((current - last) > 300000){
			return true;
		}
		return false;
	 }
	
	public static String getChatTime(Context context, long current){
	    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	    if(sdf.format(new Date()).equalsIgnoreCase(sdf.format(new Date(current)))){
	    	SimpleDateFormat HMFormat = new SimpleDateFormat("HH:mm");
		    return HMFormat.format(new Date(current));
	    }
	    return getAlmostTime(context, current);
	}
	
    /**
    * 浠ュ弸濂界殑鏂瑰紡鏄剧ず鏃堕棿
    * @param sdate
    * @return
    */
    public static String friendlyTime(Context context, long timeMills) {
    	if(timeMills == 0) {
	    	return"unknown";
	    }
    	
	    Calendar cal = Calendar.getInstance();
	    long getTimeInMillis = cal.getTimeInMillis();
	    
        long t1 = getTimeInMillis/1000;
		long t2 = timeMills/1000;
		int distance = (int)(t1 - t2); 
		if(distance < 60){
			return context.getResources().getString(R.string.time_now);
		}
	    
	    String ftime = "";
	    
	    long lt = timeMills/86400000;
	    long ct = getTimeInMillis/86400000;
	    int days = (int)(ct - lt);
	    if(days == 0){
		    int hour = (int)((getTimeInMillis - timeMills)/3600000);
		    if(hour == 0)
		    	ftime = Math.max((getTimeInMillis - timeMills) / 60000, 1) + context.getResources().getString(R.string.time_second);
		    else 
		    	ftime = hour + context.getResources().getString(R.string.time_hour);
	    }
	    else if(days == 1){
	    	ftime = context.getResources().getString(R.string.time_yestoday);
	    }
	    else if(days == 2){
	    	//ftime = days + context.getResources().getString(R.string.time_day);
	    	ftime = context.getResources().getString(R.string.time_beforeyestoday);
	    }
	    else{
	    	SimpleDateFormat YMDHMformat = new SimpleDateFormat("yyyy-MM-dd");
	    	ftime = YMDHMformat.format(new Date(timeMills));
	    }
	    return ftime;
    }
    
    public static String friendlyTimeStr(Context context, String sdate) {
        	if(sdate == null || sdate.length() == 0) {
    	    	return"unknown";
    	    }
    	    
        	Date time = toDate(sdate);
    	    if(time == null) {
    	    	return"unknown";
    	    }
    	    
    	    Calendar cal = Calendar.getInstance();
    	    long getTime = time.getTime();
    	    long getTimeInMillis = cal.getTimeInMillis();
    	    
            long t1 = getTimeInMillis/1000;
    		long t2 = getTime/1000;
    		int distance = (int)(t1 - t2); 
    		if(distance < 60){
    			return context.getResources().getString(R.string.time_now);
    		}
    	    
    	    String ftime = "";
    	    
    	    long lt = getTime/86400000;
    	    long ct = getTimeInMillis/86400000;
    	    int days = (int)(ct - lt);
    	    if(days == 0){
    		    int hour = (int)((getTimeInMillis - getTime)/3600000);
    		    if(hour == 0)
    		    	ftime = Math.max((getTimeInMillis - getTime) / 60000, 1) + context.getResources().getString(R.string.time_second);
    		    else 
    		    	ftime = hour + context.getResources().getString(R.string.time_hour);
    	    }
    	    else if(days == 1){
    	    	ftime = context.getResources().getString(R.string.time_yestoday);
    	    }
    	    else if(days == 2){
    	    	//ftime = days + context.getResources().getString(R.string.time_day);
    	    	ftime = context.getResources().getString(R.string.time_beforeyestoday);
    	    }
    	    else{
    	    	SimpleDateFormat YMDHMformat = new SimpleDateFormat("yyyy-MM-dd");
    	    	ftime = YMDHMformat.format(new Date(getTime));
    	    }
    	    return ftime;
        }
    
    public static String msgReceiveTime(Context context, long timeInMillis){
    	
    	if(timeInMillis  == 0){
    		return context.getResources().getString(R.string.can_not_get_time);
    	}
    	
    	SimpleDateFormat HMFormat = new SimpleDateFormat("HH:mm");
    	SimpleDateFormat YMDHMformat = new SimpleDateFormat("yyyy-MM-dd HH:mm");

    	String time = HMFormat.format(new Date(timeInMillis));
    	
    	Calendar calendar = Calendar.getInstance();
    	long currentTime = calendar.getTimeInMillis();
    	
    	long ct = currentTime/86400000;
    	long tt = timeInMillis/86400000;
    	
    	int day = (int)(ct - tt);
    	
    	if(day == 0){
    		return time;
    	}
    	
    	if(day == 1){
    		return context.getResources().getString(R.string.time_yestoday) + time;
    	}
    	
    	if(day > 1){
    		return YMDHMformat.format(new Date(timeInMillis));
    	}
    	return "";
    }
    
    public static Date toDate(String sdate) {
        try {
            return dateFormater2.get().parse(sdate);
        }
        catch (ParseException e) {
            return null;
        }
    }
    
    public static boolean isSameDay(Context context, String date1, String date2){
    	boolean sameDay = false;
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    	
    	Date day1 = null;
    	Date day2 = null;
    	
    	SimpleDateFormat format = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" );
    	try {
    		Long time= Long.parseLong(date1);
    		String d = format.format(time);
    		day1 = format.parse(d);
    		
    		Long time2= Long.parseLong(date2);
    		String d2 = format.format(time2);
			day2 = format.parse(d2);
		} catch (Exception e) {
			sameDay = false;
			return sameDay;
		}
    	
    	 
	    String ds1 = sdf.format(day1);
	    String ds2 = sdf.format(day2);
	    if (ds1.equals(ds2)) {
	    	sameDay = true;
	    } else {
	    	sameDay = false;
	    }
	    return sameDay;
    }
    
    public static String strToDay(String date1){
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    	Date date = null;
    	
    	SimpleDateFormat format = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" );
    	try {
    		Long time= Long.parseLong(date1);
    		String d = format.format(time);
    		date = format.parse(d);
    		
		} catch (Exception e) {
			return null;
		}
    	
	    return sdf.format(date);
    }
    
    private final static ThreadLocal<SimpleDateFormat> dateFormater2 = new ThreadLocal<SimpleDateFormat>() {
        @Override
        protected SimpleDateFormat initialValue() {
            //return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            return new SimpleDateFormat("yyyyMMddHHmmssSSS");
        }
    };
    
    private static SimpleDateFormat formatYMD = new SimpleDateFormat("yyyy-MM-dd");
    private static SimpleDateFormat formatYMDHM = new SimpleDateFormat("yyyy-MM-dd HH:mm");
    private static SimpleDateFormat formatYMDHMS = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    
    public static String getStandardTime(String time, int type){
    	Date date = toDate(time);
	    if(date == null) {
	    	return "unknown";
	    }
	    switch (type) {
		case Configs.DateFormatYMD:
			return formatYMD.format(date);
			
		case Configs.DateFormatYMDHM:
			return formatYMDHM.format(date);
		}
    	return formatYMDHMS.format(date);
    }
    
    public static long getTotalTime(){
    	SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmssSSS");
    	return Long.parseLong(format.format(new Date()));
    }
    
    public static String getIntegralDate(Context context, long date){
    	if(date == 0){
    		return "unknown";
    	}
    	SimpleDateFormat YMDHMformat = new SimpleDateFormat("yyyy-MM-dd HH:mm");

    	return YMDHMformat.format(new Date(date));
    }
	
	 public static boolean isInternetAvaiable(Context context){
        ConnectivityManager mannager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo info=mannager.getActiveNetworkInfo();
        if(info==null || !info.isAvailable() || !info.isConnected()){
            return false;
        }
        
        return true;
	 }  
	
	 public static int getVersionNumber(Context context){
		String packageName = context.getPackageName();
		int version = 0;
		try {
		    PackageInfo pinfo = context.getPackageManager().getPackageInfo(packageName, PackageManager.GET_CONFIGURATIONS);
		    version = pinfo.versionCode;
		} 
		catch (NameNotFoundException e) {
			e.printStackTrace();
		}	
		return version;
	}
	 
	 public static String getVersionName(Context context){
		String packageName = context.getPackageName();
		String versionName = null;
		try {
		    PackageInfo pinfo = context.getPackageManager().getPackageInfo(packageName, PackageManager.GET_CONFIGURATIONS);
		    versionName = pinfo.versionName;
		} 
		catch (NameNotFoundException e) {
			e.printStackTrace();
		}	
		return versionName;
	}
	 
	@SuppressWarnings("deprecation")
	public static int getAndroidSDKVersion() { 
	   int version = 0; 
	   try { 
	     version = Integer.valueOf(android.os.Build.VERSION.SDK); 
	   } catch (NumberFormatException e) { 
		   e.printStackTrace();
	   } 
	   return version; 
	} 
	
	public static String getLocalIpAddress() {  
         String ipaddress="";
         
	     try {  
	         for (Enumeration<NetworkInterface> en = NetworkInterface  
	                 .getNetworkInterfaces(); en.hasMoreElements();) {  
	             NetworkInterface intf = en.nextElement();  
	             for (Enumeration<InetAddress> enumIpAddr = intf  
	                     .getInetAddresses(); enumIpAddr.hasMoreElements();) {  
	                 InetAddress inetAddress = enumIpAddr.nextElement();  
	                 if (!inetAddress.isLoopbackAddress()) {  
	                         ipaddress=ipaddress+";"+ inetAddress.getHostAddress().toString();  
	                 }  
	             }  
	         }  
	     } catch (SocketException ex) {  
	     }  
	     int index = 0;
	     if(ipaddress != null && ((index = ipaddress.lastIndexOf(";")) != -1)){
	    	 ipaddress = ipaddress.substring(index + 1);
	     }
	     return ipaddress; 
     }

	 public boolean isWiFiAvailable(Context context) {
		ConnectivityManager cm = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
		if (null != cm) {
			NetworkInfo[] info = cm.getAllNetworkInfo();
			if (info != null) {
				for (int i = 0; i < info.length; i++) {
					if (info[i].getTypeName().equals("WIFI") && info[i].isConnected()) {
						info = null;
						return true;
					}
				}
			}
			info = null;
		}
		return false;
	}
	 
	 public String getHardwareID(Context context) {
		if (null == context) return null;

		String strId = null;
		// 鍙朓MEI锛岄渶瑕佹湁鐢佃瘽妯″潡
		TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
		if (null != tm) strId = tm.getDeviceId();
		if (null != strId && strId.length()>5) {
			// 鏈塈MEI
			return "i." + strId;
		}
		// 纭欢serialno锛�闇�2.3鎵嶆敮鎸�
		try {
			Class<?> c = Class.forName("android.os.SystemProperties");
			Method get = c.getMethod("get", String.class, String.class);
			strId = (String) (get.invoke(c, "ril.serialnumber", "none"));
			if (null == strId || strId.length() < 8)
				strId = (String) (get.invoke(c, "ro.serialno", "none"));
			if (null != strId && strId.length() > 7) return "s." + strId;
		} 
		catch (Exception ignored) {}
		
		// 鍙杦ifi mac
		WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
		if (null != wifi){
			WifiInfo info = wifi.getConnectionInfo();
			if (null != info) strId = info.getMacAddress();	
			if (null != strId && strId.length()>8) return "m." + strId;
		}
		// 纭欢serialno锛�闇�2.2鎵嶈兘鐪熸鏀寔
		strId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);		
		if (null != strId && strId.length()>8) return "a." + strId;
		
		return strId;
	}
}
